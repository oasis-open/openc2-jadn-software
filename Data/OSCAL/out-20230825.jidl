     package: "http://csrc.nist.gov/ns/oscal/1.1.0/oscal-catalog-schema.json"
     exports: ["$Root"]
      config: {"$FieldName": "^[$a-z][-_$A-Za-z0-9]{0,63}$"}
     comment: "OSCAL Control Catalog Model: JSON Schema"

$Root = Record
   1 $schema          URIReferenceDatatype optional // A JSON Schema directive to bind a specific schema to its document instance.
   2 catalog          Catalog                      // A structured, organized collection of control information.

Catalog = Record                                   // A structured, organized collection of control information.
   1 uuid             UUIDDatatype                 // Provides a globally unique means to identify a given catalog instance.
   2 metadata         Metadata                     // Provides information about the containing document, and defines concepts that are shared across the document.
   3 params           Params optional
   4 controls         Controls optional
   5 groups           Groups optional
   6 back-matter      Back-matter optional         // A collection of resources that may be referenced from within the OSCAL document instance.

Group = Record                                     // A group of controls, or of groups of controls.
   1 id               TokenDatatype optional       // Identifies the group for the purpose of cross-linking within the defining instance or from other instances that reference the catalog.
   2 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the group.
   3 title            String                       // A name given to the group, which may be used by a tool for display and navigation.
   4 params           Params optional
   5 props            Props optional
   6 links            Links optional
   7 parts            Parts optional
   8 groups           Groups optional
   9 controls         Controls optional

Control = Record                                   // A structured object representing a requirement or guideline, which when implemented will reduce an aspect of risk related to an information system and its information.
   1 id               TokenDatatype                // Identifies a control such that it can be referenced in the defining catalog and other OSCAL instances (e.g., profiles).
   2 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the control.
   3 title            String                       // A name given to the control, which may be used by a tool for display and navigation.
   4 params           Params optional
   5 props            Props optional
   6 links            Links optional
   7 parts            Parts optional
   8 controls         Controls optional

Part = Record                                      // An annotated, markup-based textual element of a control's or catalog group's definition, or a child of another part.
   1 id               TokenDatatype optional       // A unique identifier for the part.
   2 name             TokenDatatype                // A textual label that uniquely identifies the part's semantic type, which exists in a value space qualified by the ns.
   3 ns               URIDatatype optional         // An optional namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
   4 class            TokenDatatype optional       // An optional textual providing a sub-type or characterization of the part's name, or a category to which the part belongs.
   5 title            String optional              // An optional name given to the part, which may be used by a tool for display and navigation.
   6 props            Props optional
   7 prose            String optional              // Permits multiple paragraphs, lists, tables etc.
   8 parts            Parts optional
   9 links            Links optional

Parameter = Record                                 // Parameters provide a mechanism for the dynamic assignment of value(s) in a control.
   1 id               TokenDatatype                // A unique identifier for the parameter.
   2 class            TokenDatatype optional       // A textual label that provides a characterization of the type, purpose, use or scope of the parameter.
   3 depends-on       TokenDatatype optional       // (deprecated) Another parameter invoking this one. This construct has been deprecated and should not be used.
   4 props            Props optional
   5 links            Links optional
   6 label            String optional              // A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.
   7 usage            String optional              // Describes the purpose and use of a parameter.
   8 constraints      Constraints optional
   9 guidelines       Guidelines optional
  10 values           Values optional
  11 select           Parameter-selection optional // Presenting a choice among alternatives.
  12 remarks          Remarks optional             // Additional commentary about the containing object.

Parameter-constraint = Record                      // A formal or informal expression of a constraint or test.
   1 description      String optional              // A textual summary of the constraint to be applied.
   2 tests            Tests optional

Parameter-guideline = Record                       // A prose statement that provides a recommendation for the use of a parameter.
   1 prose            String                       // Prose permits multiple paragraphs, lists, tables etc.

Parameter-selection = Record                       // Presenting a choice among alternatives.
   1 how-many         Parametercardinality optional // Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.
   2 choice           Choice1 optional

Include-all = Record                               // Include all controls from the imported catalog or profile resources.

Metadata = Record                                  // Provides information about the containing document, and defines concepts that are shared across the document.
   1 title            String                       // A name given to the document, which may be used by a tool for display and navigation.
   2 published        DateTimeWithTimezoneDatatype optional // The date and time the document was last made available.
   3 last-modified    DateTimeWithTimezoneDatatype // The date and time the document was last stored for later retrieval.
   4 version          StringDatatype               // Used to distinguish a specific revision of an OSCAL document from other previous and future versions.
   5 oscal-version    StringDatatype               // The OSCAL model version the document was authored against and will conform to as valid.
   6 revisions        Revisions optional
   7 document-ids     Document-ids optional
   8 props            Props optional
   9 links            Links optional
  10 roles            Roles optional
  11 locations        Locations optional
  12 parties          Parties optional
  13 responsible-parties Responsible-parties optional
  14 actions          Actions optional
  15 remarks          Remarks optional             // Additional commentary about the containing object.

Back-matter = Record                               // A collection of resources that may be referenced from within the OSCAL document instance.
   1 resources        Resources optional

Property = Record                                  // An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
   1 name             TokenDatatype                // A textual label, within a namespace, that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
   2 uuid             UUIDDatatype optional        // A unique identifier for a property.
   3 ns               URIDatatype optional         // A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
   4 value            StringDatatype               // Indicates the value of the attribute, characteristic, or quality.
   5 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the property's name.
   6 group            TokenDatatype optional       // An identifier for relating distinct sets of properties.
   7 remarks          Remarks optional             // Additional commentary about the containing object.

Link = Record                                      // A reference to a local or remote resource, that has a specific relation to the containing object.
   1 href             URIReferenceDatatype         // A resolvable URL reference to a resource.
   2 rel              Linkrelationtype optional    // Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
   3 media-type       StringDatatype optional      // A label that indicates the nature of a resource, as a data serialization or format.
   4 resource-fragment StringDatatype optional     // In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.
   5 text             String optional              // A textual label to associate with the link, which may be used for presentation in a tool.

Responsible-party = Record                         // A reference to a set of persons and/or organizations that have responsibility for performing the referenced role in the context of the containing object.
   1 role-id          TokenDatatype                // A reference to a role performed by a party.
   2 party-uuids      Party-uuids
   3 props            Props optional
   4 links            Links optional
   5 remarks          Remarks optional             // Additional commentary about the containing object.

Action = Record                                    // An action applied by a role within a given party to the content.
   1 uuid             UUIDDatatype                 // A unique identifier that can be used to reference this defined action elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.
   2 date             DateTimeWithTimezoneDatatype optional // The date and time when the action occurred.
   3 type             TokenDatatype                // The type of action documented by the assembly, such as an approval.
   4 system           URIDatatype                  // Specifies the action type system used.
   5 props            Props optional
   6 links            Links optional
   7 responsible-parties Responsible-parties optional
   8 remarks          Remarks optional             // Additional commentary about the containing object.

Responsible-role = Record                          // A reference to a role with responsibility for performing a function relative to the containing object, optionally associated with a set of persons and/or organizations that perform that role.
   1 role-id          TokenDatatype                // A human-oriented identifier reference to a role performed.
   2 props            Props optional
   3 links            Links optional
   4 party-uuids      Party-uuids optional
   5 remarks          Remarks optional             // Additional commentary about the containing object.

Hash = Record                                      // A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
   1 algorithm        Hashalgorithm                // The digest method by which a hash is derived.
   2 value            StringDatatype

Remarks = String                                   // Additional commentary about the containing object.

Telephone-number = Record                          // A telephone service number as defined by ITU-T E.164.
   1 type             Typeflag optional            // Indicates the type of phone number.
   2 number           StringDatatype

Address = Record                                   // A postal address for the location.
   1 type             Addresstype optional         // Indicates the type of address.
   2 addr-lines       Addr-lines optional
   3 city             StringDatatype optional      // City, town or geographical region for the mailing address.
   4 state            StringDatatype optional      // State, province or analogous geographical region for a mailing address.
   5 postal-code      StringDatatype optional      // Postal or ZIP code for mailing address.
   6 country          StringDatatype optional      // The ISO 3166-1 alpha-2 country code for the mailing address.

Document-id = Record                               // A document identifier qualified by an identifier scheme.
   1 scheme           Documentidentificationscheme optional // Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.
   2 identifier       StringDatatype

Base64Datatype = String                            // Binary data encoded using the Base 64 encoding algorithm as defined by RFC4648.

DateTimeWithTimezoneDatatype = String              // A string representing a point in time with a required timezone.

EmailAddressDatatype = Boolean                     // An email address string formatted according to RFC 6531.

StringDatatype = String                            // A non-empty string with leading and trailing whitespace disallowed. Whitespace is: U+9, U+10, U+32 or [ 
	]+

TokenDatatype = String                             // A non-colonized name as defined by XML Schema Part 2: Datatypes Second Edition. https://www.w3.org/TR/xmlschema11-2/#NCName.

URIDatatype = String                               // A universal resource identifier (URI) formatted according to RFC3986.

URIReferenceDatatype = String                      // A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986.

UUIDDatatype = String                              // A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.

Params = ArrayOf(Parameter){1..*}

Controls = ArrayOf(Control){1..*}

Groups = ArrayOf(Group){1..*}

Props = ArrayOf(Property){1..*}

Links = ArrayOf(Link){1..*}

Parts = ArrayOf(Part){1..*}

Constraints = ArrayOf(Parameter-constraint){1..*}

Guidelines = ArrayOf(Parameter-guideline){1..*}

Values = ArrayOf(Parameter-value){1..*}

Tests = ArrayOf(Tests){1..*}

Choice1 = ArrayOf(String){1..*}

Revisions = ArrayOf(Revisions){1..*}

Document-ids = ArrayOf(Document-id){1..*}

Roles = ArrayOf(Roles){1..*}

Locations = ArrayOf(Locations){1..*}

Parties = ArrayOf(Parties){1..*}

Responsible-parties = ArrayOf(Responsible-party){1..*}

Actions = ArrayOf(Action){1..*}

Resources = ArrayOf(Resources){1..*}

Party-uuids = ArrayOf(Party-uuid){1..*}

Addr-lines = ArrayOf(Addr-line){1..*}
