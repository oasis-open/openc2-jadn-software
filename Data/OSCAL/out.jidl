     package: "http://csrc.nist.gov/ns/oscal/1.1.0/oscal-catalog-schema.json"
     exports: ["URIReferenceDatatype", "Catalog"]
      config: {"$FieldName": "^[a-z][-_A-Za-z0-9]{0,31}$"}
     comment: "OSCAL Control Catalog Model: JSON Schema"

Json-schema-directive = String                     // A JSON Schema directive to bind a specific schema to its document instance.

Catalog = Record                                   // A structured, organized collection of control information.
   1 uuid             UUIDDatatype                 // Provides a globally unique means to identify a given catalog instance.
   2 metadata         Metadata
   3 params           Parameter [0..*]
   4 controls         Control [0..*]
   5 groups           Group [0..*]
   6 back-matter      Back-matter optional

Group = Record                                     // A group of controls, or of groups of controls.
   1 id               TokenDatatype optional       // Identifies the group for the purpose of cross-linking within the defining instance or from other instances that reference the catalog.
   2 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the group.
   3 title            GroupTitle                   // A name given to the group, which may be used by a tool for display and navigation.
   4 params           Parameter [0..*]
   5 props            Property [0..*]
   6 links            Link [0..*]
   7 parts            Part [0..*]
   8 groups           Group [0..*]
   9 controls         Control [0..*]

Control = Record                                   // A structured object representing a requirement or guideline, which when implemented will reduce an aspect of risk related to an information system and its information.
   1 id               TokenDatatype                // Identifies a control such that it can be referenced in the defining catalog and other OSCAL instances (e.g., profiles).
   2 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the control.
   3 title            ControlTitle                 // A name given to the control, which may be used by a tool for display and navigation.
   4 params           Parameter [0..*]
   5 props            Property [0..*]
   6 links            Link [0..*]
   7 parts            Part [0..*]
   8 controls         Control [0..*]

Part = Record                                      // An annotated, markup-based textual element of a control's or catalog group's definition, or a child of another part.
   1 id               TokenDatatype optional       // A unique identifier for the part.
   2 name             TokenDatatype                // A textual label that uniquely identifies the part's semantic type, which exists in a value space qualified by the ns.
   3 ns               URIDatatype optional         // An optional namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
   4 class            TokenDatatype optional       // An optional textual providing a sub-type or characterization of the part's name, or a category to which the part belongs.
   5 title            PartTitle optional           // An optional name given to the part, which may be used by a tool for display and navigation.
   6 props            Property [0..*]
   7 prose            PartText optional            // Permits multiple paragraphs, lists, tables etc.
   8 parts            Part [0..*]
   9 links            Link [0..*]

Parameter = Record                                 // Parameters provide a mechanism for the dynamic assignment of value(s) in a control.
   1 id               TokenDatatype                // A unique identifier for the parameter.
   2 class            TokenDatatype optional       // A textual label that provides a characterization of the type, purpose, use or scope of the parameter.
   3 depends-on       TokenDatatype optional       // (deprecated) Another parameter invoking this one. This construct has been deprecated and should not be used.
   4 props            Property [0..*]
   5 links            Link [0..*]
   6 label            ParameterLabel optional      // A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.
   7 usage            ParameterUsageDescription optional // Describes the purpose and use of a parameter.
   8 constraints      Parameter-constraint [0..*]
   9 guidelines       Parameter-guideline [0..*]
  10 values           Parameter-value [0..*]
  11 select           Parameter-selection optional
  12 remarks          Remarks optional

Parameter-constraint = Record                      // A formal or informal expression of a constraint or test.
   1 description      ConstraintDescription optional // A textual summary of the constraint to be applied.
   2 tests            ConstraintTest [0..*]

Parameter-guideline = Record                       // A prose statement that provides a recommendation for the use of a parameter.
   1 prose            GuidelineText                // Prose permits multiple paragraphs, lists, tables etc.

Parameter-value = String                           // A parameter value or set of values.

Parameter-selection = Record                       // Presenting a choice among alternatives.
   1 how-many         ParameterCardinality optional // Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.
   2 choice           String [0..*]

Include-all = Record                               // Include all controls from the imported catalog or profile resources.

Metadata = Record                                  // Provides information about the containing document, and defines concepts that are shared across the document.
   1 title            DocumentTitle                // A name given to the document, which may be used by a tool for display and navigation.
   2 published        Published optional
   3 last-modified    Last-modified
   4 version          Version
   5 oscal-version    Oscal-version
   6 revisions        RevisionHistoryEntry [0..*]
   7 document-ids     Document-id [0..*]
   8 props            Property [0..*]
   9 links            Link [0..*]
  10 roles            Role [0..*]
  11 locations        Location [0..*]
  12 parties          Party [0..*]
  13 responsible-parties Responsible-party [0..*]
  14 actions          Action [0..*]
  15 remarks          Remarks optional

Location-uuid = String                             // Reference to a location by UUID.

Party-uuid = String                                // Reference to a party by UUID.

Role-id = String                                   // Reference to a role by UUID.

Back-matter = Record                               // A collection of resources that may be referenced from within the OSCAL document instance.
   1 resources        Resource [0..*]

Property = Record                                  // An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
   1 name             TokenDatatype                // A textual label, within a namespace, that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
   2 uuid             UUIDDatatype optional        // A unique identifier for a property.
   3 ns               URIDatatype optional         // A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
   4 value            StringDatatype               // Indicates the value of the attribute, characteristic, or quality.
   5 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the property's name.
   6 group            TokenDatatype optional       // An identifier for relating distinct sets of properties.
   7 remarks          Remarks optional

Link = Record                                      // A reference to a local or remote resource, that has a specific relation to the containing object.
   1 href             URIReferenceDatatype         // A resolvable URL reference to a resource.
   2 rel              LinkRelationType optional    // Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
   3 media-type       StringDatatype optional      // A label that indicates the nature of a resource, as a data serialization or format.
   4 resource-fragment StringDatatype optional     // In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.
   5 text             LinkText optional            // A textual label to associate with the link, which may be used for presentation in a tool.

Responsible-party = Record                         // A reference to a set of persons and/or organizations that have responsibility for performing the referenced role in the context of the containing object.
   1 role-id          TokenDatatype                // A reference to a role performed by a party.
   2 party-uuids      Party-uuid [1..*]
   3 props            Property [0..*]
   4 links            Link [0..*]
   5 remarks          Remarks optional

Action = Record                                    // An action applied by a role within a given party to the content.
   1 uuid             UUIDDatatype                 // A unique identifier that can be used to reference this defined action elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.
   2 date             DateTimeWithTimezoneDatatype optional // The date and time when the action occurred.
   3 type             TokenDatatype                // The type of action documented by the assembly, such as an approval.
   4 system           URIDatatype                  // Specifies the action type system used.
   5 props            Property [0..*]
   6 links            Link [0..*]
   7 responsible-parties Responsible-party [0..*]
   8 remarks          Remarks optional

Responsible-role = Record                          // A reference to a role with responsibility for performing a function relative to the containing object, optionally associated with a set of persons and/or organizations that perform that role.
   1 role-id          TokenDatatype                // A human-oriented identifier reference to a role performed.
   2 props            Property [0..*]
   3 links            Link [0..*]
   4 party-uuids      Party-uuid [0..*]
   5 remarks          Remarks optional

Hash = Record                                      // A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
   1 algorithm        Hashalgorithm                // The digest method by which a hash is derived.
   2 value            StringDatatype

Remarks = String                                   // Additional commentary about the containing object.

Published = String                                 // The date and time the document was last made available.

Last-modified = String                             // The date and time the document was last stored for later retrieval.

Version = String                                   // Used to distinguish a specific revision of an OSCAL document from other previous and future versions.

Oscal-version = String                             // The OSCAL model version the document was authored against and will conform to as valid.

Email-address = String                             // An email address as defined by RFC 5322 Section 3.4.1.

Telephone-number = Record                          // A telephone service number as defined by ITU-T E.164.
   1 type             Typeflag optional            // Indicates the type of phone number.
   2 number           StringDatatype

Address = Record                                   // A postal address for the location.
   1 type             AddressType optional         // Indicates the type of address.
   2 addr-lines       Addr-line [0..*]
   3 city             StringDatatype optional      // City, town or geographical region for the mailing address.
   4 state            StringDatatype optional      // State, province or analogous geographical region for a mailing address.
   5 postal-code      StringDatatype optional      // Postal or ZIP code for mailing address.
   6 country          StringDatatype optional      // The ISO 3166-1 alpha-2 country code for the mailing address.

Addr-line = String                                 // A single line of an address.

Document-id = Record                               // A document identifier qualified by an identifier scheme.
   1 scheme           DocumentIdentificationScheme optional // Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.
   2 identifier       StringDatatype

Base64Datatype = String                            // Binary data encoded using the Base 64 encoding algorithm as defined by RFC4648.

DateTimeWithTimezoneDatatype = String              // A string representing a point in time with a required timezone.

EmailAddressDatatype = String                      // An email address string formatted according to RFC 6531.

StringDatatype = String                            // A non-empty string with leading and trailing whitespace disallowed. Whitespace is: U+9, U+10, U+32 or [ 
	]+

TokenDatatype = String                             // A non-colonized name as defined by XML Schema Part 2: Datatypes Second Edition. https://www.w3.org/TR/xmlschema11-2/#NCName.

URIDatatype = String                               // A universal resource identifier (URI) formatted according to RFC3986.

URIReferenceDatatype = String                      // A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986.

UUIDDatatype = String                              // A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.
