{
  "info": {
    "title": "JADN Metaschema Conversion",
    "package": "http://oasis-open.org/jadn/v1.0/schema",
    "exports": ["METASCHEMA", "METASCHEMA-CONSTRAINTS"],
    "config": {
      "$MaxBinary": 5555,
      "$MaxString": 5555,
      "$MaxElements": 555,
      "$Sys": "$",
      "$TypeName": "^[A-Za-z][-:_A-Za-z0-9]{0,63}$",
      "$FieldName": "^[A-Za-z][-:_A-Za-z0-9]{0,63}$",
      "$NSID": "^[A-Za-z][A-Za-z0-9]{0,7}$"
    }
  },
  "types": [
    ["Base64Datatype", "String", ["%^[0-9A-Za-z+\\/]+={0,2}$"], "Binary data encoded using the Base 64 encoding algorithm as defined by RFC4648."],
    ["BooleanDatatype", "Boolean", [], "A binary value that is either: true or false."],
    ["DateTimeDatatype", "String", ["%^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))?$"], "A string representing a point in time with an optional timezone."],
    ["DayTimeDurationDatatype", "String", ["%^-?P([0-9]+D(T(([0-9]+H([0-9]+M)?(([0-9]+|[0-9]+(\\.[0-9]+)?)S)?)|([0-9]+M(([0-9]+|[0-9]+(\\.[0-9]+)?)S)?)|([0-9]+|[0-9]+(\\.[0-9]+)?)S))?)|T(([0-9]+H([0-9]+M)?(([0-9]+|[0-9]+(\\.[0-9]+)?)S)?)|([0-9]+M(([0-9]+|[0-9]+(\\.[0-9]+)?)S)?)|([0-9]+|[0-9]+(\\.[0-9]+)?)S)$"], "An amount of time quantified in days, hours, minutes, and seconds."],
    ["DateTimeWithTimezoneDatatype", "String", ["%^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))$"], "A string representing a point in time with a required timezone."],
    ["DecimalDatatype", "Number", [], "A real number expressed using a whole and optional fractional part separated by a period."],
    ["EmailAddressDatatype", "String", ["/email"], "An email address string formatted according to RFC 6531."],
    ["HostnameDatatype", "String", ["/idn-hostname"], "An internationalized Internet host name string formatted according to section 2.3.2.3 of RFC5890."],
    ["IntegerDatatype", "Integer", [], "A whole number value."],
    ["MarkupLineDatatype", "String", ["%^[^\\n]+$"], "A single line of Markdown content conformant to the Commonmark specification."],
    ["MarkupMultilineDatatype", "String", [], "A multiple lines of Markdown content conformant to the Commonmark specification."],
    ["IPV6AddressDatatype", "String", [], "An Internet Protocol version 6 address represented using the syntax defined in section 2.2 of RFC3513."],
    ["NonNegativeIntegerDatatype", "Integer", ["{0"], "An integer value that is equal to or greater than 0."],
    ["PositiveIntegerDatatype", "Integer", ["{1"], "An integer value that is greater than 0."],
    ["StringDatatype", "String", ["%^\\S(.*\\S)?$"], "A non-empty string with leading and trailing whitespace disallowed. Whitespace is: U+9, U+10, U+32 or [ \n\t]+"],
    ["TokenDatatype", "String", ["%^\\S(.*\\S)?$"], "CHANGED FOR REGEX ISSUES A non-colonized name as defined by XML Schema Part 2: Datatypes Second Edition. https://www.w3.org/TR/xmlschema11-2/#NCName."],
    ["URIDatatype", "String", ["%^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$"], "A universal resource identifier (URI) formatted according to RFC3986."],
    ["URIReferenceDatatype", "String", ["/uri-reference"], "A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986."],
    ["UUIDDatatype", "String", ["%^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$"], "A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122."],
    ["METASCHEMA", "Record", [], "Root element of a Metaschema definition. Defines a family of data\n        structures representing a model.", [
      [1, "schema-name", "MarkupLineDatatype", [], "The name of the information model represented by this Metaschema definition."],
      [2, "schema-version", "VersionType", [], ""],
      [3, "short-name", "ShortNameType", [], ""],
      [4, "namespace", "URIDatatype", [], "The namespace for the collection of Metaschema models this Metaschema module belongs to. Also the XML namespace governing the names of elements in XML documents, which expect to be conformant to the schemas expressed by this metaschema. By using this namespace, documents and document fragments used in mixed-format environments may be distinguished from neighbor XML formats using other namespaces. This value is not reflected in Metaschema JSON."],
      [5, "json-base-uri", "JsonBaseUriType", [], ""],
      [6, "remarks", "RemarksType", [], ""],
      [7, "import", "MetaschemaImportType", [], ""],
      [8, "choices", "DefineChoices", [], ""],
      [9, "abstract", "YesNoType", ["[0"], ""]
    ]],
      ["DefineChoices", "Choice", [], "", [
      [1, "define-assembly", "GlobalAssemblyDefinitionType", [], ""],
      [2, "define-field", "GlobalFieldDefinitionType", [], ""],
      [3, "define-flag", "GlobalFlagDefinitionType", [], ""]
    ]],
    ["METASCHEMA-CONSTRAINTS", "Record", [], "Root element of a Metaschema external constraints definition. Defines rules to be applied to an existing set of Metaschema models.", [
      [1, "name", "StringDatatype", [], "The name of this constraint set."],
      [2, "version", "VersionType", [], "The version of this constraint set."],
      [3, "import", "import-href", [], "To import a set of Metaschema constraints from an out-of-line resource, supporting composition of constraint sets."],
      [4, "scope", "scope-record", [], ""],
      [5, "remarks", "RemarksType", ["[0"], ""]
    ]],
      ["import-href", "Choice", [], "", [
      [1, "href", "URIReferenceDatatype", [], "A relative or absolute URI for retrieving an out-of-line Metaschema definition."]
    ]],
      ["scope-record", "Record", [], "", [
      [1, "assembly", "assembly-object", [], ""],
      [2, "field", "field-object", [], ""],
      [3, "flag", "flag-object", [], ""],
      [4, "metaschema-namespace", "URIDatatype", ["[1"], ""],
      [5, "metaschema-short-name", "ShortNameType", ["[1"], ""]
    ]],
      ["assembly-object", "Choice", [], "", [
      [1, "extension", "DefineAssemblyConstraintsType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], ""]
    ]],
      ["field-object", "Choice", [], "", [
      [1, "extension", "DefineFieldConstraintsType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], ""]
    ]],
      ["flag-object", "Choice", [], "", [
      [1, "extension", "DefineFlagConstraintsType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], ""]
    ]],
      ["MetaschemaImportType", "Record", [], "Imports a set of Metaschema definitions from an out-of-line resource, supporting reuse of common information structures.", [
      [1, "href", "URIReferenceDatatype", ["[1"], "A relative or absolute URI for retrieving an out-of-line Metaschema definition."]
    ]],
      ["DefinitionMetadataGroup", "Record", [], "", [
      [1, "formal-name", "FormalNameType", ["[0"], ""],
      [2, "description", "MarkupLineDatatype", ["[0"], "A short description of the data construct that provides basic documentation of the construct's purpose."],
      [3, "prop", "PropertyType", ["[0"], ""]
    ]],
      ["PropertyType", "Record", [], "", [
      [1, "namespace", "URIDatatype", ["[0", "]1"], ""],
      [2, "name", "TokenDatatype",["[1"], ""],
      [3, "value", "TokenDatatype", ["[1"], ""]
    ]],
      ["ModelNameType", "Record", [], "The type of all definition and instance names.", [
      [1, "restriction", "TokenDatatype", [], ""]
    ]],
      ["GlobalAssemblyDefinitionType", "Record", [], "An element with structured element content in XML; in JSON, an object with properties. Defined globally, an assembly can be assigned to appear in the <code>model</code> of any assembly (another assembly type, or itself), by <code>assembly</code> reference.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "name-choice", "NameChoice", ["<"], ""],
      [3, "json-key", "JsonKeyType", ["[0"], ""],
      [4, "flag-choice", "FlagChoice", [], ""],
      [5, "model", "AssemblyModelType", ["[0"], ""],
      [6, "constraint", "DefineAssemblyConstraintsType", ["[0"], ""],
      [7, "remarks", "RemarksType", ["[0"], ""],
      [8, "example", "ExampleType", ["[0"], ""],
      [9, "name", "ModelNameType", ["[1"], ""],
      [10, "scope", "ScopeType", [], "default='global'"],
      [11, "attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["NameChoice", "Choice", [], "", [
      [1, "root-name", "ModelNameType", ["[0"], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""]
    ]],
      ["FlagChoice", "Choice", [], "", [
      [1, "flag", "FlagReferenceType", [], ""],
      [2, "define-flag", "InlineFlagDefinitionType", [], ""]
    ]],
      ["AssemblyModelType", "Record", [], "", [
      [1, "choies", "AssemblyModelTypeChoices", ["[0"], ""],
      [2, "any", "AnyType", ["[0"], ""]
    ]],
      ["AssemblyModelTypeChoices", "Choice", [], "", [
      [1, "assembly", "AssemblyReferenceType", [], ""],
      [2, "field", "FieldReferenceType", [], ""],
      [3, "define-assembly", "InlineAssemblyDefinitionType", [], ""],
      [4, "define-field", "InlineFieldDefinitionType", [], ""],
      [5, "choice", "ChoiceType", [], ""]
    ]],
      ["JsonValueKeyChoiceGroup", "Choice", [], "", [
      [1, "choices", "JsonValueKeyChoiceGroupChoices", ["[0", "]1"], ""]
    ]],
      ["JsonValueKeyChoiceGroupChoices", "Choice", [], "", [
      [1, "json-value-key", "JsonValueKeyType", [], ""],
      [2, "json-value-key-flag", "JsonValueKeyFlagType", [], ""]
    ]],
      ["JsonValueKeyType", "Record", [], "Used inside a field definition, designates a name (key) for the property in JSON containing the field's value. Use of a 'json-value-key' is mutually exclusive with a 'json-value-key-flag'.", [
      [1, "restriction", "ModelNameType", [], ""]
    ]],
      ["JsonValueKeyFlagType", "Record", [], "Used inside a field definition, designates a flag whose value is to be used as the name (key) for the property in JSON containing the field's value. Use of a 'json-value-key-flag' is mutally exclusive with a 'json-value-key'.", [
      [1, "flag-ref", "ModelNameType", [], ""]
    ]],
    ["GlobalFieldDefinitionType", "Record", [], "In JSON, an object with a nominal string value (potentially with internal inline - not fully structured - markup). In XML, an element with string or markup content. Defined globally, a field can be assigned to appear in the <code>model</code> of any assembly by <code>field</code> reference.", [
      [1, "first-group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""],
      [3, "json-key", "JsonKeyType", ["[0"], ""],
      [4, "second-group-ref", "JsonValueKeyChoiceGroup", [], ""],
      [5, "flag-choice", "FlagChoice", [], ""],
      [6, "constraint", "DefineFieldConstraintsType", ["[0"], ""],
      [7, "remarks", "RemarksType", ["[0"], ""],
      [8, "example", "ExampleType", ["[0"], ""],
      [9, "first-attributeGroup-ref", "FieldValueAttributeGroup", [], ""],
      [10, "collapsible", "YesNoType", [], "default=\"no\""],
      [11, "name", "ModelNameType", ["[1"], ""],
      [12, "scope", "ScopeType", [], "default=\"global\""],
      [13, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["GlobalFlagDefinitionType", "Record", [], "A data point to be expressed as an attribute in the XML or a name/value pair in the JSON. A flag may also be defined implicitly with the assembly or field to which it applies. Defined globally, a flag can be assigned to any field or assembly by <code>flag</code> reference.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""],
      [3, "constraint", "DefineFlagConstraintsType", [], ""],
      [4, "remarks", "RemarksType", ["[0"], ""],
      [5, "example", "ExampleType", ["[0"], ""],
      [6, "name", "ModelNameType", ["[1"], ""],
      [7, "first-attributeGroup-ref", "FlagValueAttributeGroup", [], ""],
      [8, "scope", "ScopeType", [], "default=\"global\""],
      [9, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["InlineAssemblyDefinitionType", "Record", [], "In JSON, an object with a nominal string value (potentially with internal inline - not fully structured - markup). In XML, an element with string or markup content. A local definition describes and constrains the appearance of the field only in this (assembly) context.", [
      [1, "first-group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "json-key", "JsonKeyType", ["[0"], ""],
      [3, "second-group-ref", "JsonValueKeyChoiceGroup", [], ""],
      [4, "group-as", "GroupAsType", [], ""],
      [5, "flag-choice", "FlagChoice", ["[0"], ""],
      [6, "model", "AssemblyModelType", ["[0"], ""],
      [7, "constraint", "DefineAssemblyConstraintsType", [], ""],
      [8, "remarks", "RemarksType", ["[0"], ""],
      [9, "example", "ExampleType", ["[0"], ""],
      [10, "first-attributeGroup-ref", "CardinalitySpecificationGroup", [], ""],
      [11, "name", "ModelNameType", ["[1"], ""],
      [12, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["InlineFieldDefinitionType", "Record", [], "In JSON, an object with a nominal string value (potentially with internal inline - not fully structured - markup). In XML, an element with string or markup content. A local definition describes and constrains the appearance of the field only in this (assembly) context.", [
      [1, "first-group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "json-key", "JsonKeyType", ["[0"], ""],
      [3, "second-group-ref", "JsonValueKeyChoiceGroup", [], ""],
      [4, "group-as", "GroupAsType", ["[0"], ""],
      [5, "flag-choice", "FlagChoice", ["[0"], ""],
      [6, "constraint", "DefineFieldConstraintsType", ["[0"], ""],
      [7, "remarks", "RemarksType", ["[0"], ""],
      [8, "example", "ExampleType", ["[0"], ""],
      [9, "first-attributeGroup-ref", "FieldValueAttributeGroup", [], ""],
      [10, "collapsible", "YesNoType", [], "default=\"no\""],
      [11, "second-attributeGroup-ref", "CardinalitySpecificationGroup", [], ""],
      [12, "name", "ModelNameType", ["[1"], ""],
      [13, "in-xml", "InXmlWrappedType", [], "default=\"WRAPPED\",  A field with assigned datatype 'markup-multiline' may be designated for representation with or without a containing (wrapper) element in XML."],
      [14, "third-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["InlineFlagDefinitionType", "Record", [], "A data point to be expressed as an attribute in the XML or a name/value pair in the JSON. A local definition describes and constrains the appearance of the flag only in its parent (assembly or field) context.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "constraint", "DefineFlagConstraintsType", ["[0"], ""],
      [3, "remarks", "RemarksType", ["[0"], ""],
      [4, "example", "ExampleType", ["[0"], ""],
      [5, "name", "ModelNameType", ["[1"], ""],
      [6, "first-attributeGroup-ref", "FlagValueAttributeGroup", [], ""],
      [7, "required", "YesNoType", [], "default=\"no\""],
      [8, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["FormalNameType", "Record", [], "A formal name for the data construct, to be presented in documentation. It is permissible for a formal name to provide nothing but an expanson of what is already given by a tag (for example, this element could have formal name \"Formal name\") but it should at the very least confirm the intended semantics for the user, not confuse them.", [
      [1, "restriction", "StringDatatype", [], ""]
    ]],
      ["JsonBaseUriType", "Record", [], "The JSON Base URI is nominal base URI assigned to a JSON Schema instance expressing the model defined by this metaschema.", [
      [1, "restriction", "URIDatatype", [], ""]
    ]],
      ["RemarksType", "Record", [], "Any explanatory or helpful information to be provided in the documentation of an assembly, field or flag.", [
      [1, "extension", "MarkupMultilineDatatype", [], ""],
      [2, "attribute", "RemarksAttribute", [], ""],
      [3, "restriction", "TokenDatatype", [], ""],
      [4, "restriction-elements", "RestrictionElements", [], ""]
    ]],
      ["RemarksAttribute", "Enumerated", [], "", [
      [1, "class", "Mark as 'XML' for XML-only or 'JSON' for JSON-only remarks."]
    ]],
      ["RestrictionElements", "Enumerated", [], "", [
      [1, "XML", "The remark applies to only XML representations."],
      [2, "JSON", "The remark applies to only JSON and YAML representations."]
    ]],
      ["VersionType", "Record", [], "A version string used to distinguish between multiple revisions of the same resource.", [
      [1, "restriction", "StringDatatype", [], ""]
    ]],
      ["ShortNameType", "Record", [], "A short (code) name to be used for the metaschema, for example as a constituent of names assigned to derived artifacts such as schemas and conversion utilities.", [
      [1, "restriction", "TokenDatatype", [], ""]
    ]],
      ["AssemblyReferenceType", "Record", [], "Referencing an assembly definition to include an assembly or assemblies of a given type in a model.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""],
      [3, "group-as", "GroupAsType", ["[0"], ""],
      [4, "remarks", "RemarksType", ["[0"], ""],
      [5, "ref", "ModelNameType", ["[1"], ""],
      [6, "first-attributeGroup-ref", "CardinalitySpecificationGroup", [], ""],
      [7, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["FieldReferenceType", "Record", [], "Referencing a field definition to include a field or fields of a given type in a model.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""],
      [3, "group-as", "GroupAsType", ["[0"], ""],
      [4, "remarks", "RemarksType", ["[0"], ""],
      [5, "ref", "ModelNameType", ["[0"], ""],
      [6, "first-attributeGroup-ref", "CardinalitySpecificationGroup", [], ""],
      [7, "in-xml", "InXmlWrappedType", [], "default=\"WRAPPED\". A field with assigned datatype 'markup-multiline' may be designated for representation with or without a containing (wrapper) element in XML."],
      [8, "second-attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
    ["InXmlWrappedType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-elements", "EnumElements", [], ""]
    ]],
      ["EnumElements", "Enumerated", [], "", [
      [1, "WRAPPED", "Any paragraph or block contents of a markup-multiline field will be represented with a containing (wrapper) element in the XML"],
      [2, "WITH_WRAPPER", "(deprecated)Alias for WRAPPED."],
      [3, "UNWRAPPED", "With in-xml='UNWRAPPED', a field contents will be represented in the XML with no wrapper, so the field will be implicit. Among sibling fields in a given model, only one of them may be designated as UNWRAPPED."]
    ]],
      ["CardinalitySpecificationGroup", "Record", [], "", [
      [1, "min-occurs", "NonNegativeIntegerDatatype", ["[0"], "Minimum occurrence of assemblies or fields within a valid model. The default value is 0, for an optional occurrence."],
      [2, "max-occurs", "NaturalNumberOrUnboundedType", ["[1"], "Maximum occurrence of assemblies or fields within a valid model. The default value is 1, for a single occurrence. 'unbounded' permits any number of assemblies of the designated type."]
    ]],
      ["FieldValueAttributeGroup", "Record", [], "", [
      [1, "as-type", "FieldDatatypesType", [], "default=\"string\""],
      [2, "default", "StringDatatype", [], ""]
    ]],
      ["FlagValueAttributeGroup", "Record", [], "", [
      [1, "as-type", "SimpleDatatypesType", [], "default=\"string\""],
      [2, "default", "StringDatatype", [], ""]
    ]],
      ["NaturalNumberOrUnboundedType", "Choice", [], "", [
      [1, "union-memberTypes", "PositiveIntegerDatatype", [], ""],
      [2, "restriction", "StringDatatype", [], ""],
      [3, "enum-value", "unbounded", [], ""]
    ]],
      ["unbounded", "Enumerated", [], "", [
      [1, "unbounded", ""]
    ]],
      ["ConstraintType", "Record", [], "abstract=\"true\"", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "id", "TokenDatatype", [], "use=\"optional\""],
      [3, "level", "LevelType", [], "default=\"ERROR\""]
    ]],
      ["ConstraintContentsGroup", "Record", [], "", [
      [1, "remarks", "RemarksType", ["[0"], ""]
    ]],
      ["LevelType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "LevelTypeEnums", [], ""]
    ]],
      ["LevelTypeEnums", "Enumerated", [], "", [
      [1, "CRITICAL", "A violation of the constraint represents a serious fault in the content that will prevent typical use of the content"],
      [2, "ERROR", "A violation of the constraint represents a fault in the content. This may include issues around compatibility, integrity, consistency, etc."],
      [3, "WARNING", "A violation of the constraint represents a potential issue with the content"],
      [4, "INFORMATIONAL", "A violation of the constraint represents a point of interest"]
    ]],
      ["AllowedValuesType", "Record", [], "Indicates a set of values to be recognized for a flag or field, with semantics asserted by a metaschema enumeration (enum).", [
      [1, "extension", "ConstraintType", [], ""],
      [2, "enum", "EnumType", [], ""],
      [3, "group-ref", "ConstraintContentsGroup", [], ""],
      [4, "allow-other", "YesNoType", [], "The given enumerated value or values are inclusive of other values ('yes') or not ('no', the default)"],
      [5, "extensible", "ExtensibleEnumType", [], "Determines if the given enumerated value or values within a namespace may be extended by other allowed value constraints."]
    ]],
      ["ExtensibleEnumType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "ExtensibleEnums", [], ""]
    ]],
      ["ExtensibleEnums", "Enumerated", [], "", [
      [1, "model", "Can be extended by constraints within the same model."],
      [2, "external", "Can be extended by external constraints."],
      [3, "none", "Cannot be extended."]
    ]],
      ["EnumType", "Record", [], "An enumerated value for a flag or field. The value is indicated by the 'value' attribute while the element contents describe the intended semantics for documentation.", [
      [1, "extension", "MarkupLineDatatype", [], ""],
      [2, "value", "StringDatatype", ["[1"], "A value recognized for a flag or field."],
      [3, "attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["DeprecationAttributeGroup", "Record", [], "", [
      [1, "deprecated", "VersionType", [], "The associated construct has been deprecated at the specified version. Its use should be avoided if possible."]
    ]],
      ["FlagReferenceType", "Record", [], "A flag definition, represented by the <define-flag> element, is used to declare a reusable flag within a Metaschema module. A flag definition provides the means to implement a simple, named information element with a value. Flag definitions are leaf nodes in a Metaschema-based model that are intended to represent granular particles of identifying and qualifying information.", [
      [1, "group-ref", "DefinitionMetadataGroup", [], ""],
      [2, "use-name", "ModelNameType", ["[0"], ""],
      [3, "remarks", "RemarksType", ["[0"], ""],
      [4, "ref", "ModelNameType", ["[1"], ""],
      [5, "required", "YesNoType", [], "default=\"no\""],
      [6, "attributeGroup-ref", "DeprecationAttributeGroup", [], ""]
    ]],
      ["RegexType", "Record", [], "A regex subset that is conformant to both https://www.w3.org/TR/xmlschema11-2/#regexes and https://www.ecma-international.org/ecma-262/11.0/index.html#sec-patterns.", [
      [1, "restriction", "StringDatatype", [], ""]
    ]],
      ["MetaschemaPathType", "Record", [], "", [
      [1, "restriction", "StringDatatype", [], ""]
    ]],
      ["MatchesConstraintType", "Record", [], "", [
      [1, "extension", "ConstraintType", [], ""],
      [2, "group-ref", "ConstraintContentsGroup", [], ""],
      [3, "regex", "RegexType", [], ""],
      [4, "datatype", "SimpleDatatypesType", [], "Specifies the datatype for which the value identified by the scope attribute must conform to."]
    ]],
      ["ScopedMatchesConstraintType", "Record", [], "", [
      [1, "extension", "MatchesConstraintType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the target of the constraint as a metaschema path. If the value is \".\" and the containing metaschema object is a field, the constraint applies to the field's value. Otherwise, the scope value is not allowed to be used."]
    ]],
      ["ScopedAllowedValuesType", "Record", [], "", [
      [1, "extension", "AllowedValuesType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the target of the constraint as a metaschema path. If the value is \".\" and the containing metaschema object is a field, the constraint applies to the field's value."]
    ]],
      ["DefineFlagConstraintsType", "Record", [], "", [
      [1, "allowed-values", "AllowedValuesType", [], "Constrains the allowed values for the flag."],
      [2, "matches", "MatchesConstraintType", [], "Constrains the allowed values based on the provided regex pattern."],
      [3, "index-has-key", "IndexHasKeyConstraintType", [], "Checks that the specified <code>key-field</code> values match a key in the index with the specified <code>name</code>."],
      [4, "expect", "ExpectConstraintType", [], "Checks that the specified test returns true in this evaluation context."],
      [5, "remarks", "RemarksType", ["[0"], ""]
    ]],
      ["IndexFieldType", "Record", [], "", [
      [1, "remarks", "RemarksType", ["[0"], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the field or flag value that is used to generate the key for a given object that is a member of this index. If more than one key-field is provided, then the key is a composition of the specified key-fields. The ordering of the key-field defined the relative order of the index's key. The field or flag values pointed to must be a field value or a required flag value."]
    ]],
      ["KeyConstraintType", "Record", [], "Defines an unique key constraint. ", [
      [1, "first-extension", "ConstraintType", [], ""],
      [2, "enum-value", "KeyConstraintTEnum", [], ""],
      [3, "second-extension", "IndexFieldType", [], ""],
      [4, "pattern", "RegexType", [], "The first captured group in the regular expression is used as the key value for lookup. The regular expression must not match a zero-length string."],
      [5, "group-ref", "ConstraintContentsGroup", [], ""]
    ]],
      ["KeyConstraintTEnum", "Enumerated", [], "", [
      [1, "key-field", "Specifies a value, relative to the provided <code>target</code>, that is to be used as part of the key. More than one key-field can be used to create a composite key."]
    ]],
      ["ScopedKeyConstraintType", "Record", [], "", [
      [1, "extension", "KeyConstraintType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the value objects to be included in the key constraint, or the object that contains a reference to an item in an index. If the value is \".\", then the key is targeting the current metaschema object."]
    ]],
      ["IndexHasKeyConstraintType", "Record", [], "Defines an index, a check against an index, or a uniqueness constraint.", [
      [1, "extension", "KeyConstraintType", [], ""],
      [2, "name", "ModelNameType", ["[1"], "Specifies the name of the index, a reference to an index, or the name of a uniqueness constraint."]
    ]],
      ["ScopedIndexHasKeyConstraintType", "Record", [], "Defines an index, a check against an index, or a uniqueness constraint. ", [
      [1, "extension", "IndexHasKeyConstraintType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the value objects to be included in the index constraint, or the object that contains a reference to an item in an index. If the value is \".\", then the key is targeting the current metaschema object."]
    ]],
      ["ScopedIndexConstraintType", "Record", [], "Defines an index, a check against an index, or a uniqueness constraint. KeyConstraintType EXT", [
      [1, "extension", "KeyConstraintType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the value objects to be included in the index constraint, or the object that contains a reference to an item in an index. If the value is \".\", then the key is targeting the current metaschema object."],
      [3, "name", "ModelNameType", ["[1"], "Specifies the name of the index, a reference to an index, or the name of a uniqueness constraint."]
    ]],
      ["ExpectConstraintType", "Record", [], "", [
      [1, "extension", "ConstraintType", [], ""],
      [2, "message", "StringDatatype", ["[0"], ""],
      [3, "group-ref", "ConstraintContentsGroup", [], ""],
      [4, "test", "MetaschemaPathType", ["[1"], "A test that is expected to pass in this context. Presently, datatyping is not directly supported except by explicit use of data type casting functions, e.g. xs:double() and xs:date()."]
    ]],
      ["ScopedExpectConstraintType", "Record", [], "", [
      [1, "extension", "ExpectConstraintType", [], ""],
      [2, "target", "MetaschemaPathType", ["[1"], "Specifies the target of the constraint as a metaschema path. If the value is \".\" and the containing metaschema object is a field or flag, the constraint applies to the value of the field or flag. Otherwise, the scope value is not allowed to be used."]
    ]],
      ["CommonModelConstraintsGroup", "Choice", [], "", [
      [1, "allowed-values", "ScopedAllowedValuesType", [], "Constrains the allowed values for the flag or field referenced by the scope attribute."],
      [2, "matches", "ScopedMatchesConstraintType", [], "Constrains the allowed values based on the provided regex pattern or checks that the value is conformant to the specified datatype."],
      [3, "index-has-key", "ScopedIndexHasKeyConstraintType", [], "Checks that the specified <code>key-field</code> values match a key in the index with the specified <code>name</code>."],
      [4, "expect", "ScopedExpectConstraintType", [], "Checks that the specified test returns true in this evaluation context."]
    ]],
      ["HasCardinalityConstraintType", "Record", [], "", [
      [1, "extension", "ConstraintType", [], ""],
      [2, "group-ref", "ConstraintContentsGroup", [], ""],
      [3, "target", "MetaschemaPathType", ["[1"], "Specifies the target of the constraint as a metaschema path. If the value is \".\" and the containing metaschema object is a field, the constraint applies to the field's value. Otherwise, the scope value is not allowed to be used."],
      [4, "min-occurs", "NonNegativeIntegerDatatype", [], "Minimum occurrence of assemblies or fields within a valid model. The default value is 0, for an optional occurrence."],
      [5, "max-occurs", "NonNegativeIntegerDatatype", [], "Maximum occurrence of assemblies or fields within a valid model. The default value is 1, for a single occurrence. 'unbounded' permits any number of assemblies of the designated type."]
    ]],
      ["AssemblyConstraintsGroup", "Choice", [], "", [
      [1, "index", "ScopedIndexConstraintType", [], "Defines a new named index. Each entry in the index will have a unique key, based on the <code>key-field</code> elements, and an associated object value, based on the <code>target</code> selection.."],
      [2, "is-unique", "ScopedKeyConstraintType", [], "Checks that the specified set of <code>target</code> entries have a key, based on the <code>key-field</code> entries that is unique. The <code>name</code> identifies the name of the uniqueness constraint, which can be used for error reporting, etc."],
      [3, "has-cardinality", "HasCardinalityConstraintType", [], "Checks that the specified set of <code>target</code> entries match the provided cardinality."]
    ]],
      ["DefineFieldConstraintsType", "Record", [], "", [
      [1, "group-ref", "CommonModelConstraintsGroup", ["[1"], ""],
      [2, "remarks", "RemarksType", ["[0"], ""]
    ]],
      ["DefineAssemblyConstraintsType", "Record", [], "", [
      [1, "first-group-ref", "CommonModelConstraintsGroup", ["[1"], ""],
      [2, "second-group-ref", "AssemblyConstraintsGroup", ["[1"], ""],
      [3, "remarks", "RemarksType", ["[0"], ""]
    ]],
      ["ChoiceType", "Choice", [], "Within a model, indicates that only one of a set of fields or assemblies, referenced in the choice, may occur in valid instances.", [
      [1, "assembly", "AssemblyReferenceType", [], ""],
      [2, "field", "FieldReferenceType", [], ""],
      [3, "define-assembly", "InlineAssemblyDefinitionType", [], ""],
      [4, "define-field", "InlineFieldDefinitionType", [], ""]
    ]],
      ["AnyType", "String", [], "Within a model, a foreign element may be permitted here.."],
      ["ExampleType", "Record", [], "", [
      [1, "description", "MarkupLineDatatype", ["[0"], "A short description of the example that provides basic documentation about the example's purpose."],
      [2, "remarks", "RemarksType", ["[0"], ""],
      [3, "choice", "ExampleTypeChoices", ["[0"], ""],
      [4, "href", "URIDatatype", [], ""],
      [5, "path", "StringDatatype", [], ""]
    ]],
      ["ExampleTypeChoices", "Enumerated", [], "", [
      [1, "namespace", "##other"],
      [2, "processContents", "lax"]
    ]],
      ["JsonKeyType", "Record", [], "In the XML, produces an attribute with the given name, whose value is used as a key value (aka object property name) in the JSON, enabling objects to be 'lifted' out of arrays when such values are distinct. Implies that siblings will never share values. Overloading with datatype 'ID' and naming the key 'id' is legitimate and useful. Even without ID validation, uniqueness of these values among siblings is validable.", [
      [1, "flag-ref", "ModelNameType", [], ""]
    ]],
      ["GroupAsType", "Record", [], "When a given referenced field or assembly must be wrapped in an outer grouping, these settings apply, including a name for the group, and how to express the grouping in the respective formats. Not necessary when a field or assembly has max-occurs='1'", [
      [1, "name", "ModelNameType", ["[1"], ""],
      [2, "in-json", "JsonGroupAsBehaviorType", [], "How to represent a grouping in JSON"],
      [3, "in-xml", "XmlGroupAsBehaviorType", [], "Whether to represent a grouping explicitly in XML"]
    ]],
      ["JsonGroupAsBehaviorType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "JsonGroupAsBehaviorEnums", [], ""]
    ]],
      ["JsonGroupAsBehaviorEnums", "Enumerated", [], "", [
      [1, "ARRAY", "Always use an array"],
      [2, "SINGLETON_OR_ARRAY", "Produce a singleton for a single member (field or assembly) or an array for multiple members"],
      [3, "BY_KEY", "For any group (one or more members) produce an object with properties for each member, using a designated flag for their key (label) values, which must be distinct"]
    ]],
      ["XmlGroupAsBehaviorType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "XmlGroupAsBehaviorEnums", [], ""]
    ]],
      ["XmlGroupAsBehaviorEnums", "Enumerated", [], "", [
      [1, "GROUPED", "Use a wrapper element"],
      [2, "UNGROUPED", "Do not use a wrapper element"]
    ]],
      ["SimpleDatatypesType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "SimpleDatatypesEnums", [], ""]
    ]],
      ["SimpleDatatypesEnums", "Enumerated", [], "", [
      [1, "base64", ""],
      [2, "boolean", ""],
      [3, "date", ""],
      [4, "date-time", ""],
      [5, "date-time-with-timezone", ""],
      [6, "date-with-timezone", ""],
      [7, "day-time-duration", ""],
      [8, "decimal", ""],
      [9, "email-address", ""],
      [10, "hostname", ""],
      [11, "integer", ""],
      [12, "ip-v4-address", ""],
      [13, "ip-v6-address", ""],
      [14, "non-negative-integer", ""],
      [15, "positive-integer", ""],
      [16, "string", "A string with no leading or trailing whitespace."],
      [17, "token", ""],
      [18, "uri", ""],
      [19, "uri-reference", ""],
      [20, "uuid", ""],
      [21, "base64Binary", ""],
      [22, "dateTime", ""],
      [23, "dateTime-with-timezone", ""],
      [24, "email", ""],
      [25, "nonNegativeInteger", ""],
      [26, "positiveInteger", ""]
    ]],
      ["FieldDatatypesType", "Record", [], "", [
      [1, "union-memberTypes", "SimpleDatatypesType", [], ""],
      [2, "restriction", "TokenDatatype", [], ""],
      [3, "enum-values", "FieldDatatypesEnums", [], ""]
    ]],
      ["FieldDatatypesEnums", "Enumerated", [], "", [
      [1, "markup-line", ""],
      [2, "markup-multiline", ""]
    ]],
      ["YesNoType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "YesNoTypeEnums", [], ""]
    ]],
      ["YesNoTypeEnums", "Enumerated", [], "", [
      [1, "yes", ""],
      [2, "no", ""]
    ]],
      ["ScopeType", "Record", [], "", [
      [1, "restriction", "TokenDatatype", [], ""],
      [2, "enum-values", "ScopeTypeEnums", [], ""]
    ]],
      ["ScopeTypeEnums", "Enumerated", [], "", [
      [1, "local", "This definition is only available in the context of the current metaschema."],
      [2, "global", "This definition will be made available to any metaschema that includes this one either directly or indirectly through a chain of imported metaschemas."]
    ]]
  ]
}