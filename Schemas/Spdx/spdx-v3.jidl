       title: "SPDX v3"
     package: "http://spdx.org/spdx/v3/document"
     version: "spdx-3-model 2023-02-07"
 description: "This information model defines the serialized structure of SPDXv3 logical model types"
     license: "CC0-1.0"
     exports: ["Elements"]
      config: {"$FieldName": "^[a-zA-Z@][_A-Za-z0-9]{0,63}$"}

Elements = ArrayOf(Element){1..*} unique          // Serialized set of Element values

Payload = Record                                  // Serialized file (or equivalent) for transferring Elements
   1 namespace        IRI                         // Default namespace for Element ids in this file (rdf BASE)
   2 prefixes         NamespaceMap [0..1]       // Namespace abbreviations used in this file (rdf PREFIX)
   3 creationInfo     CreationInformation         // File creation info and element defaults
   4 elementValue     Element unique [1..*]       // Element values, created in this file or copied
   5 spdxDocumentId   Link(Element) [0..1]      // SpdxDocument element that describes this file

NamespaceMap = MapOf(Prefix, IRI){1..*}

Element = Record
   1 spdxId           Key(IRI)                    // Element unique identifier: local, prefix:local, or absolute-IRI
   2 type             ElementType                 // Element type and type-specific properties
   3 creationInfo     CreationInformation
   4 name             String [0..1]
   5 summary          String [0..1]
   6 description      String [0..1]
   7 comment          String [0..1]
   8 verifiedUsing    IntegrityMethod [0..*]      // Applies only to Artifacts
   9 externalReference ExternalReference [0..*]
  10 externalIdentifier ExternalIdentifier [0..*]
  11 extension        Extensions [0..1]

ElementType = Choice
   1 annotation       Annotation                  // <- Element
   2 relationship     Relationship                // <- Element
   3 agent            Agent                       // <- Element: unspecified subtype
   4 person           Person                      // <- Agent
   5 organization     Organization                // <- Agent
   6 softwareAgent    SoftwareAgent               // <- Agent
   7 tool             Tool                        // <- Element
   8 spdxDocument     SpdxDocument                // <- Collection: A file containing serialized element values
   9 bom              Bom                         // <- Collection
  10 package          Package                     // <- Artifact: pkg:Software
  11 file             File                        // <- Artifact: pkg:Software
  12 snippet          Snippet                     // <- Artifact: pkg:Software
  13 sbom             Sbom                        // <- BOM: pkg:Software
  14 swdRelationship  SoftwareDependencyRelationship // <- Relationship

Annotation = Record
   1 annotationType   AnnotationType
   2 subject          Link(Element)
   3 statement        String [0..1]
   4 contentType      MediaType [0..1]

Relationship = Record
   1 relationshipType RelationshipType            // just 'type'
   2 from             Link(Element)
   3 to               Link(Element) [1..*]
   4 completeness     RelationshipCompleteness [0..1]

Agent = Record                                    // Principal identity, unspecified type

Person = Record                                   // <-Agent

Organization = Record                             // <-Agent

SoftwareAgent = Record                            // <-Agent

Tool = Record                                     // <-Element

SpdxDocument = Record                             // Statements about a serialized file. "verifiedUsing" is required.
   1 namespace        IRI [0..1]                // Default namespace for Element ids in the SPDX file (rdf BASE)
   2 prefixes         NamespaceMap [0..1]       // Namespace abbreviations used in the SPDX file (rdf PREFIX)
   3 element          Link(Element) [1..*]        // Elements contained in the payload
   4 documentRef      Link(Element) [0..*]        // SpdxDocuments containing elements referenced by the payload
   5 downloadLocation URL [0..1]                // Unique ID or Location of the payload
   6 import           ExternalMap [0..*]          // IRI assignment to non-element hashable data entities

Bom = Record
   1 element          Link(Element) [1..*]        // <-Collection
   2 rootElement      Link(Element) [0..*]        // <-Collection  This element is a root. Other containers that it contains?

Snippet = Record {1..*}                           // Everything optional, must have something
   1 contentIdentifier  URI [0..1]
   2 snippetPurpose   SoftwarePurpose [0..*]
   3 byteRange        PositiveIntegerRange [0..1]
   4 lineRange        PositiveIntegerRange [0..1]
   5 originatedBy     Link(Element) [0..*]        // <-Artifact:  Link(Agent)

File = Record
   1 name             String
   2 contentIdentifier URI [0..1]]
   3 contentType      MediaType [0..1]
   4 filePurpose      SoftwarePurpose [0..*]
   5 originatedBy     Link(Element) [0..*]        // <-Artifact:  Link(Agent)

Package = Record
   1 packagePurpose   SoftwarePurpose [0..*]
   2 downloadLocation URL [0..1]
   3 homePage         URL [0..1]
   4 originatedBy     Link(Element) [0..*]        // <-Artifact:  Link(Agent)

Sbom = Record
   1 element          Link(Element) [1..*]        // <-Collection
   2 rootElement      Link(Element) [0..*]        // <-Collection

CreationInformation = Record
   1 specVersion      SemVer
   2 profile          ProfileIdentifier [1..*]
   3 created          DateTime
   4 dataLicense      LicenseId
   5 createdBy        Link(Element) [1..*]        // Link(Agent)
   6 createdUsing     Link(Element) [0..*]        // Link(Tool)
   7 comment          String [0..1]

IntegrityMethod = Choice
   1 hash             Hashes
   2 signature        PublicKeySignature          // A public key by itself is not an integrity check

Hashes = Map{1..*}
   1 sha1             Binary{20..20} /x [0..1]
   2 sha224           Binary{28..28} /x [0..1]
   3 sha256           Binary{32..32} /x [0..1]
   4 sha384           Binary{48..48} /x [0..1]
   5 sha512           Binary{64..64} /x [0..1]
   6 sha3_224         Binary{28..28} /x [0..1]
   7 sha3_256         Binary{32..32} /x [0..1]
   8 sha3_384         Binary{48..48} /x [0..1]
   9 sha3_512         Binary{64..64} /x [0..1]
  10 md2              Binary{16..16} /x [0..1]
  11 md4              Binary{16..16} /x [0..1]
  12 md5              Binary{16..16} /x [0..1]
  13 md6_128          Binary{16..16} /x [0..1] // Digest length?
  20 spdx_pvc_sha1    Binary{20..20} /x [0..1]
  21 spdx_pvc_sha256  Binary{32..32} /x [0..1]
  22 blake2b_256      Binary{32..32} /x [0..1]
  23 blak32b_384      Binary{48..48} /x [0..1]
  24 blake2b_512      Binary{64..64} /x [0..1]
  25 blake3           Binary{32..32} /x [0..1]

PublicKeySignature = Record

Extensions = MapOf(IRI, String)                   // Extensions are opaque strings

DateTime = String                                 // implement Integer /datetime_ms

MediaType = String

Prefix = String{1..16}                            // Abbreviation for document namespace

SemVer = String{pattern="^(\d{1,4})\.(\d{1,6})$"} // m.n: "3.141592" is valid, "3.14159262" is not.

SnippetLocation = Record

IRI = String /iri

URL = String /uri                                 // IRI, must be a locator

ExternalIdentifier = Record
   1 type             ExternalIdentifierType
   2 identifier       String
   3 comment          String [0..1]

ExternalMap = Record
   1 externalId       IRI
   2 verifiedUsing    IntegrityMethod
   3 locationHint     URL [0..1]

ExternalReference = Record
   1 type             ExternalReferenceType
   2 locator          IRI                         // URL - must be a locator
   3 contentType      MediaType [0..1]
   4 comment          String [0..1]

SoftwareDependencyRelationship = Record
   1 linkType         DependencyLinkType
   2 scope            DependencyScope
   3 requirement      DependencyRequirement

AnnotationType = Enumerated
   0 other
   1 review

DependencyLinkType = Enumerated
   0 other
   1 noAssertion                                  // default
   2 static
   3 dynamic
   4 tool

DependencyRequirement = Enumerated
   1 noAssertion                                  // default
   2 optional
   3 required
   4 provided
   5 preRequisite

DependencyScope = Enumerated
   0 other
   1 noAssertion                                  // default
   2 build
   3 dev
   4 test

ExternalIdentifierType = Enumerated
   0 other
   1 cpe_2.2
   2 cpe_2.3
   3 email
   4 purl
   5 uri-scheme
   6 swid                                         // deprecate
   7 swhid                                        // deprecate
   8 gitoid                                       // deprecate

ExternalReferenceType = Enumerated
   0 other
   1 altDownloadLocation
   2 altWebPage
   3 securityAdvisory
   4 securityFix
   5 securityOther

LicenseId = Enumerated
   0 CC0-1.0                                      // Fixed value unless others are added

ProfileIdentifier = Enumerated                    // Shown as "pkg" on logical model diagram, use upper case names?
   1 core
   2 software
   3 licensing
   4 security
   5 build
   6 usage
   7 ai
   8 dataset
   9 service

RelationshipCompleteness = Enumerated
   1 complete                                     // default
   2 incomplete
   3 noAssertion

RelationshipType = Enumerated
   0 other                      // Meta: element->element comment
   1 describes                  // Meta: bundle->artifact
   2 amends                     // Meta: collection->collection
   3 contains                   // Structure: artifact->artifact
   4 dependsOn                  // Behavioral: artifact->artifact
   5 patches                    // Behavioral: artifact->artifact
   6 tests                      // Behavioral: artifact->artifact
  10 generates                  // Pedigree: artifact->artifact
  11 expandedFromArchive        // Pedigree
  12 fileAdded                  // Pedigree
  13 fileDeleted                // Pedigree
  14 fileModified               // Pedigree
  15 copy                       // Pedigree: artifact->artifact
  20 ancestor                   // Provenance: artifact->artifact
  21 suppliedBy                 // Provenance: artifact->artifact
  22 variant                    // Provenance: artifact->artifact

SoftwarePurpose = Enumerated
   0 other
   1 application
   2 archive
   3 bom
   4 configuration
   5 container
   6 data
   7 device
   8 documentation
   9 executable
  10 file
  11 firmware
  12 framework
  13 install
  14 library
  15 module
  16 operatingSystem
  17 patch
  18 source
