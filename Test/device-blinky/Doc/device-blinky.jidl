       title: "OpenC2 device schema for LED panel controller using sFractal blinky interface"
     package: "http://sfractal.com/schemas/blinky/v1.0"
     exports: ["OpenC2-Command", "OpenC2-Response"]

OpenC2-Command = Record                            // The Command defines an Action to be performed on a Target
   1 action           Action                       // The task or activity to be performed (i.e., the 'verb').
   2 target           Target                       // The object of the Action. The Action is performed on the Target.
   3 args             Args optional                // Additional information that applies to the Command.
   4 profile          Profile optional             // The actuator profile defining the function to be performed by the Command.
   5 command_id       Command-ID optional          // An identifier of this Command.

Action = Enumerated
   3 query                                         // Initiate a request for information.
   6 deny                                          // Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access.
   8 allow                                         // Permit access to or execution of a Target.
  15 set
  16 update                                        // Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update.
  20 delete                                        // Remove an entity (e.g., data, files, flows).

Target = Choice
   9 features         Features                     // A set of items used with the query Action to determine an Actuator's capabilities.
9001 blinky/          Target$blinky                // Profile-defined targets

Args = Map{1..*}
   1 start_time       Date-Time optional           // The specific date/time to initiate the Command
   2 stop_time        Date-Time optional           // The specific date/time to terminate the Command
   3 duration         Duration optional            // The length of time for an Command to be in effect
   4 response_requested Response-Type optional     // The type of Response required for the Command: none, ack, status, complete
9001 blinky/          Args$blinky optional         // Profile-defined command arguments

Profile = Enumerated
9001 blinky

OpenC2-Response = Record
   1 status           Status-Code                  // An integer status code.
   2 status_text      String optional              // A free-form human-readable description of the Response status.
   3 results          Results optional             // Map of key:value pairs that contain additional results based on the invoking Command.

Results = Map{1..*}                                // Response Results
   1 versions         SemVer unique [0..*]         // List of OpenC2 language versions supported by this Consumer
   2 profiles         Profile unique [0..*]        // List of profiles supported by this Consumer
   3 pairs            Pairs optional               // List of targets applicable to each supported Action
   4 rate_limit       Number{0.0..*} optional      // Maximum number of requests per minute supported by design or policy
9001 blinky/          Results$blinky optional      // Profile-defined results

Pairs = Map{1..*}                                  // Targets applicable to each action supported by this device
   3 query            ArrayOf(QueryTargets) unique
9001 blinky/          Pairs$blinky optional

QueryTargets = Enumerated
   9 features

Target$blinky = Choice                             // Profile-defined targets
   1 led              String
   2 leds             String [1..*]

Args$blinky = Map{1..*}                            // Profile-defined command arguments

Results$blinky = Map{1..*}                         // Profile-defined response results

Pairs$blinky = Map                                 // Targets applicable to each action
  15 set              ArrayOf(Set-Targets$blinky) unique

Set-Targets$blinky = Enumerated
   1 led
   2 leds

Features = ArrayOf(Feature) unique                 // An array of names used to query a Consumer for its supported capabilities.

Date-Time = Integer{0..*}                          // Date and Time

Duration = Integer{0..*}                           // A length of time

Feature = Enumerated                               // Specifies the results to be returned from a query features Command
   1 versions                                      // List of OpenC2 Language versions supported by this Consumer
   2 profiles                                      // List of profiles supported by this Consumer
   3 pairs                                         // List of supported Actions and applicable Targets
   4 rate_limit                                    // Maximum number of Commands per minute supported by design or policy

Response-Type = Enumerated
   0 none                                          // No response
   1 ack                                           // Respond when Command received
   2 status                                        // Respond with progress toward Command completion
   3 complete                                      // Respond when all aspects of Command completed

Status-Code = Enumerated.ID
 102                                               // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
 200                                               // OK:: the Command has succeeded
 201                                               // Created:: the Command has succeeded and a new resource has been created as a result of it
 400                                               // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
 401                                               // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
 403                                               // Forbidden:: the Consumer understood the Command but refuses to authorize it
 404                                               // Not Found:: the Consumer has not found anything matching the Command
 500                                               // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
 501                                               // Not Implemented:: the Consumer does not support the functionality required to perform the Command
 503                                               // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Command-ID = String{pattern="^\S{0,36}$"}          // Command Identifier

SemVer = String{pattern="^(\d{1,4})(\.(\d{1,6})){0,2}$"} // Major.Minor.Patch version number
