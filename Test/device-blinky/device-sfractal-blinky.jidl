       title: "OpenC2 device schema for LED panel controller using sFractal blinky interface"
     package: "http://sfractal.com/schemas/blinky/v1.0"
     exports: ["OpenC2-Command", "OpenC2-Response"]

OpenC2-Command = Record                            // The Command defines an Action to be performed on a Target
   1 action           Action                       // The task or activity to be performed (i.e., the 'verb').
   2 target           Target                       // The object of the Action. The Action is performed on the Target.
   3 args             Args optional                // Additional information that applies to the Command.
   4 actuator         Actuator optional            // The subject of the Action. The Actuator executes the Action on the Target.
   5 command_id       Command-ID optional          // An identifier of this Command.

Action = Enumerated
   3 query                                         // Initiate a request for information.
   6 deny                                          // Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access.
   8 allow                                         // Permit access to or execution of a Target.
  15 set
  16 update                                        // Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update.
  20 delete                                        // Remove an entity (e.g., data, files, flows).

Target = Choice
   9 features         Features                     // A set of items used with the query Action to determine an Actuator's capabilities.
1024 slpf/            Target$slpf
1026 sbom/            Target$sbom
1035 pac/             Target$pac
9001 blinky/          Target$blinky

Args = Map{1..*}
   1 start_time       Date-Time optional           // The specific date/time to initiate the Command
   2 stop_time        Date-Time optional           // The specific date/time to terminate the Command
   3 duration         Duration optional            // The length of time for an Command to be in effect
   4 response_requested Response-Type optional     // The type of Response required for the Command: none, ack, status, complete
1024 slpf/            Args$slpf optional
1026 sbom/            Args$sbom optional
1035 pac/             Args$pac optional
9001 blinky/          Args$blinky optional

Actuator = Enumerated
1024 slpf
1026 sbom
1035 pac
9001 blinky

OpenC2-Response = Record
   1 status           Status-Code                  // An integer status code.
   2 status_text      String optional              // A free-form human-readable description of the Response status.
   3 results          Results optional             // Map of key:value pairs that contain additional results based on the invoking Command.

Results = Map{1..*}                                // Response Results
   1 versions         SemVer unique [0..10]        // List of OpenC2 language versions supported by this Actuator
   2 profiles         Nsid unique [0..*]           // List of profiles supported by this Actuator
   3 pairs            Pairs optional
   4 rate_limit       Number{0.0..*} optional      // Maximum number of requests per minute supported by design or policy
   5 args             Enumerated(Enum[Args]) [0..*] // List of supported Command Arguments
1024 slpf/            Results$slpf optional
1026 sbom/            Results$sbom optional
1035 pac/             Results$pac optional
9001 blinky/          Results$blinky optional

Pairs = Map
   3 query            ArrayOf(QueryTargets) unique
1024 slpf/            Pairs$slpf
1026 sbom/            Pairs$sbom
1035 pac/             Pairs$pac
9001 blinky/          Pairs$blinky

QueryTargets = Enumerated
   9 features

Target$sbom = Choice                               // Profile-defined targets
   1 sbom             SBOM-Specifiers$sbom         // Return URI IDs for all or specified SBOMs
   2 sbom_list        SBOM-List$sbom               // Return requested SBOM info for specified IDs

Args$sbom = Map                                    // Profile-defined command arguments

Results$sbom = Map{1..*}                           // Profile-defined response results
   1 search           ArrayOf(URI){0..*}           // IDs of all SBOMs matching query criteria
   2 sbom_list        SBOM-Info$sbom [0..*]        // SBOM Info for each ID in sbom_list

Pairs$sbom = Map
   3 query            ArrayOf(Query-Targets$sbom) unique

Query-Targets$sbom = Enumerated
   1 search
   2 sbom_list

SBOM-Specifiers$sbom = Map                         // Query: If none specified, return IDs for all SBOMs
   1 type             ArrayOf(Enum[SBOM-Content$sbom]) unique optional // SBOM type
   2 format           ArrayOf(DataFormat$sbom) unique optional // Data format
   3 info             ArrayOf(Info$sbom) unique optional // Type of SBOM info to return

SBOM-List$sbom = Map
   1 sids             URI [0..*]                   // Query: IDs of SBOMs to return (return all if none listed)
   2 info             ArrayOf(Info$sbom){1..*} unique // Type of info to return for each SBOM

Info$sbom = Enumerated                             // SBOM-Info fields to return
   1 summary                                       // NTIA Minimumum Elements of an SBOM
   2 content                                       // SBOM structured data
   3 blob                                          // Uninterpreted SBOM bytes

SBOM-Info$sbom = Map
   1 type             Enumerated(Enum[SBOM-Content$sbom]) // SBOM type (name of standard)
   2 format           DataFormat$sbom              // Data (serialization) format
   3 sid              URI                          // Unique identifier or locator of the SBOM
   4 summary          SBOM-Elements$sbom optional  // NTIA Minimumum Elements of an SBOM
   5 content          SBOM-Content$sbom optional   // SBOM structured data
   6 blob             Binary optional              // Uninterpreted SBOM bytes

SBOM-Elements$sbom = Record
   1 supplier         String [1..*]                // Name of entity that creates, defines, and identifies components
   2 component        String [1..*]                // Designation(s) assigned to a unit of software defined by the original supplier
   3 version          String                       // Identifier used by supplier to specify a change from a previously identified version
   4 component_ids    String [1..*]                // Other identifiers used to identify a component, or serve as a look-yp key
   5 dependencies     String [1..*]                // Upstream component(s)
   6 author           String                       // Name of the entity that creates SBOM data for this component
   7 timestamp        DateTime$sbom                // Record of the date and time of the SBOM data assembly

SBOM-Content$sbom = Choice
   1 cyclonedx        String                       // Placeholder for CycloneDX data model
   2 spdx2            String                       // Placeholder for SPDX v2.x data model
   3 spdx3            String                       // Placeholder for SPDX v3 data model

DataFormat$sbom = Enumerated                       // Serialization Data Formats
   1 ttv                                           // Text Tag-Value
   2 json                                          // JSON verbose
   3 json-m                                        // JSON concise/minimized
   4 json-ld                                       // JSON linked data
   5 cbor                                          // CBOR binary
   6 protobuf                                      // Protocol Buffers binary
   7 xml                                           // XML
   8 ss-csv                                        // Spreadsheet comma separated values

DateTime$sbom = Integer{0..*}

Target$slpf = Choice                               // SLPF targets
   1 rule_number      Rule-ID$slpf                 // Immutable identifier assigned when a rule is created. Identifies a rule to be deleted

Args$slpf = Map{1..*}                              // SLPF command arguments
   1 drop_process     Drop-Process$slpf optional   // Specifies how to handle denied packets
   2 persistent       Boolean optional             // Normal operations assume any changes to a device are to be implemented persistently. Setting the persistent modifier to FALSE results in a change that is not persistent in the event of a reboot or restart
   3 direction        Direction$slpf optional      // Specifies whether to apply rules to incoming or outgoing traffic. If omitted, rules are applied to both
   4 insert_rule      Rule-ID$slpf optional        // Specifies the identifier of the rule within a list, typically used in a top-down rule list

Results$slpf = Map                                 // SLPF results defined in this profile
   1 rule_number      Rule-ID$slpf optional        // Rule identifier returned from allow or deny Command.

Pairs$slpf = Map
   6 deny             ArrayOf(Deny-Targets$slpf) unique
   8 allow            ArrayOf(Allow-Targets$slpf) unique
  16 update           ArrayOf(Update-Targets$slpf) unique
  20 delete           ArrayOf(Delete-Targets$slpf) unique

Deny-Targets$slpf = Enumerated
   1 ipv4_net
   2 ipv6_net
   3 ipv4_connection
   4 ipv6_connection

Allow-Targets$slpf = Enumerated
   1 ipv4_net
   2 ipv6_net
   3 ipv4_connection
   4 ipv6_connection

Update-Targets$slpf = Enumerated
   1 file

Delete-Targets$slpf = Enumerated
   1 rule_number

Drop-Process$slpf = Enumerated
   1 none                                          // Drop the packet and do not send a notification to the source of the packet
   2 reject                                        // Drop the packet and send an ICMP host unreachable (or equivalent) to the source of the packet
   3 false_ack                                     // Drop the traffic and send a false acknowledgement

Direction$slpf = Enumerated
   1 both                                          // Apply rules to all traffic
   2 ingress                                       // Apply rules to incoming traffic only
   3 egress                                        // Apply rules to outgoing traffic only

Rule-ID$slpf = Integer                             // Access rule identifier

Target$pac = Choice
   1 attrs            Attribute-Specifiers$pac
   2 sbom             SBOM-Specifiers$pac

Args$pac = Map{1..*}

Results$pac = Map{1..*}
   1 attrs            PostureAttributes$pac optional
   2 sbom             SBOM-Info$pac optional

Pairs$pac = Map
   3 query            ArrayOf(Query-Targets$pac) unique

Query-Targets$pac = Enumerated
   1 attrs
   2 sbom

Attribute-Specifiers$pac = Map{1..*}
   1 os_version       Boolean optional
   2 password_min     Boolean optional
   3 file             FileSpecifiers$pac optional

SBOM-Specifiers$pac = Map
   1 type             ArrayOf(Enum[SBOM-Info$pac]) unique
   2 content          ArrayOf(Enum[SBOM-Content$pac]) unique

PostureAttributes$pac = Map{1..*}
   1 os_version       OS-Version$pac optional
   2 password_min     Integer optional
   3 file             File$pac optional

OS-Version$pac = Record
   1 name             String                       // Distribution or product name
   2 version          String                       // Suitable for presentation OS version
   3 major            Integer                      // Major release version
   4 minor            Integer                      // Minor release version
   5 patch            Integer                      // Patch release
   6 build            String                       // Build-specific or variant string
   7 platform         String                       // OS Platform or ID
   8 platform_like    String                       // Closely-related platform
   9 codename         String                       // OS Release codename
  10 arch             OS-Arch$pac                  // OS Architecture
  11 install_date     Integer optional             // Install date of the OS (seconds)
  12 pid_with_namespace String optional
  13 mount_namespace_id String optional

OS-Arch$pac = Enumerated                           // Win: wmic os get osarchitecture, or Unix: uname -m
   1 32-bit
   2 64-bit
   3 x86_32
   4 x86_64

FileSpecifiers$pac = Map{1..*}
   1 path             String optional
   2 hash             Hashes optional

File$pac = Record
   1 data             Binary

SBOM-Info$pac = Map{1..*}
   1 uri              URI optional                 // Unique identifier or locator of the SBOM
   2 summary          SBOM-Elements$pac optional   // NTIA Minimumum Elements of an SBOM
   3 content          SBOM-Content$pac optional    // SBOM structured data
   4 blob             SBOM-Blob$pac optional       // Uninterpreted SBOM bytes

SBOM-Elements$pac = Record
   1 supplier         String [1..*]                // Name(s) of entity that creates, defines, and identifies components
   2 component        String [1..*]                // Designation(s) assigned to a unit of software defined by the original supplier
   3 version          String                       // Identifier used by supplier to specify a change from a previously identified version
   4 component_ids    String [1..*]                // Other identifiers used to identify a component, or serve as a look-yp key
   5 dependencies     String [1..*]                // Upstream component(s)
   6 author           String                       // Name of the entity that creates SBOM data for this component
   7 timestamp        Date-Time                    // Record of the date and time of the SBOM data assembly

SBOM-Content$pac = Choice
   1 cyclonedx        String                       // Placeholder for CycloneDX data model
   2 spdx2            String                       // Placeholder for SPDX v2.x data model
   3 spdx3            String                       // Placeholder for SPDX v3 data model

SBOM-Blob$pac = Record
   1 format           Enumerated(Enum[SBOM-Content$pac])
   2 data             Binary

Target$blinky = Choice                             // Profile-defined targets
   1 led              String

Args$blinky = Map{1..*}                            // Profile-defined command arguments

Results$blinky = Map{1..*}                         // Profile-defined response results

Pairs$blinky = Map
  15 set              ArrayOf(Set-Targets$blinky) unique

Set-Targets$blinky = Enumerated
   1 led
   2 leds

Features = ArrayOf(Feature) unique                 // An array of names used to query a Consume for its supported capabilities.

URI = String /uri                                  // Uniform Resource Identifier, [[RFC3986]](#rfc3986).

Date-Time = Integer{0..*}                          // Date and Time

Duration = Integer{0..*}                           // A length of time

Feature = Enumerated                               // Specifies the results to be returned from a query features Command
   1 versions                                      // List of OpenC2 Language versions supported by this Consumer
   2 profiles                                      // List of profiles supported by this Consumer
   3 pairs                                         // List of supported Actions and applicable Targets
   4 rate_limit                                    // Maximum number of Commands per minute supported by design or policy

Hashes = Map{1..*}                                 // Cryptographic hash values
   1 md5              Binary{16..16} /x optional   // MD5 hash as defined in [[RFC1321]](#rfc1321)
   2 sha1             Binary{20..20} /x optional   // SHA1 hash as defined in [[RFC6234]](#rfc6234)
   3 sha256           Binary{32..32} /x optional   // SHA256 hash as defined in [[RFC6234]](#rfc6234)

Nsid = String{1..16}                               // A short identifier that refers to a namespace.

Response-Type = Enumerated
   0 none                                          // No response
   1 ack                                           // Respond when Command received
   2 status                                        // Respond with progress toward Command completion
   3 complete                                      // Respond when all aspects of Command completed

Status-Code = Enumerated.ID
 102                                               // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
 200                                               // OK:: the Command has succeeded
 201                                               // Created:: the Command has succeeded and a new resource has been created as a result of it
 400                                               // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
 401                                               // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
 403                                               // Forbidden:: the Consumer understood the Command but refuses to authorize it
 404                                               // Not Found:: the Consumer has not found anything matching the Command
 500                                               // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
 501                                               // Not Implemented:: the Consumer does not support the functionality required to perform the Command
 503                                               // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Command-ID = String{pattern="^\S{0,36}$"}          // Command Identifier

SemVer = String{pattern="^(\d{1,4})(\.(\d{1,6})){0,2}$"} // Major.Minor.Patch version number
