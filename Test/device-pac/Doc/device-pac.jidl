       title: "OpenC2 device schema for the PACE collection service"
     package: "http://acme.com/schemas/device/pac/v2.0"
     exports: ["OpenC2-Command", "OpenC2-Response"]

OpenC2-Command = Record                            // The Command defines an Action to be performed on a Target
   1 action           Action                       // The task or activity to be performed (i.e., the 'verb').
   2 target           Target                       // The object of the Action. The Action is performed on the Target.
   3 args             Args optional                // Additional information that applies to the Command.
   4 profile          Profile optional             // The actuator profile defining the function to be performed by the Command.
   5 command_id       Command-ID optional          // An identifier of this Command.

Action = Enumerated
   3 query                                         // Initiate a request for information.

Target = Choice
   9 features         Features                     // A set of items used with the query Action to determine an Actuator's capabilities.
1035 pac/             Target$pac                   // PAC-defined targets

Args = Map{1..*}
   1 start_time       Date-Time optional           // The specific date/time to initiate the Command
   2 stop_time        Date-Time optional           // The specific date/time to terminate the Command
   3 duration         Duration optional            // The length of time for an Command to be in effect
   4 response_requested Response-Type optional     // The type of Response required for the Command: none, ack, status, complete
1035 pac/             Args$pac optional            // PAC-defined command arguments

Profile = Enumerated
1035 pac

OpenC2-Response = Record
   1 status           Status-Code                  // An integer status code.
   2 status_text      String optional              // A free-form human-readable description of the Response status.
   3 results          Results optional             // Map of key:value pairs that contain additional results based on the invoking Command.

Results = Map{1..*}                                // Response Results
   1 versions         SemVer unique [0..10]        // List of OpenC2 language versions supported by this Actuator
   2 profiles         Profile unique [0..*]        // List of profiles supported by this Actuator
   3 pairs            Pairs optional               // DEPRECATED: targets applicable to each supported Action
   4 rate_limit       Number{0.0..*} optional      // Maximum number of requests per minute supported by design or policy
1035 pac/             Results$pac optional         // PAC-defined results

Pairs = Map{1..*}                                  // Targets applicable to each action supported by this device
   3 query            ArrayOf(QueryTargets) unique
1035 pac/             Pairs$pac optional

QueryTargets = Enumerated
   9 features

Target$pac = Choice                                // Profile-defined targets
   1 attrs            Attribute-Specifiers$pac
   2 sbom             SBOM-Specifiers$pac

Args$pac = Map{1..*}

Results$pac = Map{1..*}                            // Profile-defined response results
   1 attrs            PostureAttributes$pac optional
   2 sbom             SBOM-Info$pac optional

Pairs$pac = Map                                    // Targets applicable to each action
   3 query            ArrayOf(Query-Targets$pac) unique

Query-Targets$pac = Enumerated
   1 attrs
   2 sbom

Attribute-Specifiers$pac = Map{1..*}
   1 os_version       Boolean optional
   2 password_min     Boolean optional
   3 file             FileSpecifiers$pac optional

SBOM-Specifiers$pac = Map
   1 type             ArrayOf(Enum[SBOM-Info$pac]) unique
   2 content          ArrayOf(Enum[SBOM-Content$pac]) unique

PostureAttributes$pac = Map{1..*}
   1 os_version       OS-Version$pac optional
   2 password_min     Integer optional
   3 file             File$pac optional

OS-Version$pac = Record
   1 name             String                       // Distribution or product name
   2 version          String                       // Suitable for presentation OS version
   3 major            Integer                      // Major release version
   4 minor            Integer                      // Minor release version
   5 patch            Integer                      // Patch release
   6 build            String                       // Build-specific or variant string
   7 platform         String                       // OS Platform or ID
   8 platform_like    String                       // Closely-related platform
   9 codename         String                       // OS Release codename
  10 arch             OS-Arch$pac                  // OS Architecture
  11 install_date     Integer optional             // Install date of the OS (seconds)
  12 pid_with_namespace String optional
  13 mount_namespace_id String optional

OS-Arch$pac = Enumerated                           // Win: wmic os get osarchitecture, or Unix: uname -m
   1 32-bit
   2 64-bit
   3 x86_32
   4 x86_64

FileSpecifiers$pac = Map{1..*}
   1 path             String optional
   2 hash             Hashes optional

File$pac = Record
   1 data             Binary

SBOM-Info$pac = Map{1..*}
   1 uri              URI optional                 // Unique identifier or locator of the SBOM
   2 summary          SBOM-Elements$pac optional   // NTIA Minimumum Elements of an SBOM
   3 content          SBOM-Content$pac optional    // SBOM structured data
   4 blob             SBOM-Blob$pac optional       // Uninterpreted SBOM bytes

SBOM-Elements$pac = Record
   1 supplier         String [1..*]                // Name(s) of entity that creates, defines, and identifies components
   2 component        String [1..*]                // Designation(s) assigned to a unit of software defined by the original supplier
   3 version          String                       // Identifier used by supplier to specify a change from a previously identified version
   4 component_ids    String [1..*]                // Other identifiers used to identify a component, or serve as a look-yp key
   5 dependencies     String [1..*]                // Upstream component(s)
   6 author           String                       // Name of the entity that creates SBOM data for this component
   7 timestamp        DateTime$pac                 // Record of the date and time of the SBOM data assembly

SBOM-Content$pac = Choice
   1 cyclonedx        String                       // Placeholder for CycloneDX data model
   2 spdx2            String                       // Placeholder for SPDX v2.x data model
   3 spdx3            String                       // Placeholder for SPDX v3 data model

SBOM-Blob$pac = Record
   1 format           Enumerated(Enum[SBOM-Content$pac])
   2 data             Binary

DateTime$pac = String{pattern="^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$"} // RFC-3339 format

Features = ArrayOf(Feature) unique                 // An array of names used to query a Consumer for its supported capabilities.

URI = String /uri                                  // Uniform Resource Identifier, [[RFC3986]](#rfc3986).

Date-Time = Integer{0..*}                          // Date and Time

Duration = Integer{0..*}                           // A length of time

Feature = Enumerated                               // Specifies the results to be returned from a query features Command
   1 versions                                      // List of OpenC2 Language versions supported by this Consumer
   2 profiles                                      // List of profiles supported by this Consumer
   3 pairs                                         // List of supported Actions and applicable Targets
   4 rate_limit                                    // Maximum number of Commands per minute supported by design or policy

Hashes = Map{1..*}                                 // Cryptographic hash values
   1 md5              Binary{16..16} /x optional   // MD5 hash as defined in [[RFC1321]](#rfc1321)
   2 sha1             Binary{20..20} /x optional   // SHA1 hash as defined in [[RFC6234]](#rfc6234)
   3 sha256           Binary{32..32} /x optional   // SHA256 hash as defined in [[RFC6234]](#rfc6234)

Response-Type = Enumerated
   0 none                                          // No response
   1 ack                                           // Respond when Command received
   2 status                                        // Respond with progress toward Command completion
   3 complete                                      // Respond when all aspects of Command completed

Status-Code = Enumerated.ID
 102                                               // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
 200                                               // OK:: the Command has succeeded
 201                                               // Created:: the Command has succeeded and a new resource has been created as a result of it
 400                                               // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
 401                                               // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
 403                                               // Forbidden:: the Consumer understood the Command but refuses to authorize it
 404                                               // Not Found:: the Consumer has not found anything matching the Command
 500                                               // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
 501                                               // Not Implemented:: the Consumer does not support the functionality required to perform the Command
 503                                               // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Command-ID = String{pattern="^\S{0,36}$"}          // Command Identifier

SemVer = String{pattern="^(\d{1,4})(\.(\d{1,6})){0,2}$"} // Major.Minor.Patch version number
