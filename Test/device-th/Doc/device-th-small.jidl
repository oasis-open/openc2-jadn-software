       title: "Threat Hunting Profile"
     package: "https://praxiseng.com/threat-hunter-9001"
     version: "0-wd01"
 description: "Data definitions for Threat Hunting (TH) functions"
     exports: ["OpenC2-Command", "OpenC2-Response", "SCO"]
      config: {"$MaxBinary": 5555, "$MaxString": 5555, "$MaxElements": 555, "$Sys": "$", "$TypeName": "^[A-Za-z][-:_A-Za-z0-9]{0,63}$", "$FieldName": "^[A-Za-z][-:_A-Za-z0-9]{0,63}$", "$NSID": "^[A-Za-z][A-Za-z0-9]{0,7}$"}

OpenC2-Command = Record                            // The Command defines an Action to be performed on a Target
   1 action           Action                       // The task or activity to be performed (i.e., the 'verb').
   2 target           Target                       // The object of the Action. The Action is performed on the Target.
   3 args             Args optional                // Additional information that applies to the Command.
   4 actuator         Actuator optional            // The subject of the Action. The Actuator executes the Action on the Target.
   5 command_id       Command-ID optional          // An identifier of this Command.

OpenC2-Response = Map{1..*}
   1 status           Status-Code                  // An integer status code
   2 status_text      String optional              // A free-form human-readable description of the Response status
   3 results          Results optional             // Map of key:value pairs that contain additional results based on the invoking Command.

Action = Enumerated
   3 query                                         // Initiate a request for information.
  30 investigate                                   // Task the recipient to aggregate and report information as it pertains to a security event or incident.

Target = Choice
   9 features         Features                     // A set of items used with the query Action to determine an Actuator's capabilities.
1036 th               AP-Target                    // Threat Hunting Profile-defined targets

Args = Map{1..*}
   1 start_time       Date-Time optional
   2 stop_time        Date-Time optional
   3 duration         Duration optional
   4 response_requested Response-Type optional
1036 th               AP-Args optional

Actuator = Enumerated
1036 th

Results = Map{1..*}                                // Response Results
   1 versions         Version unique [0..10]       // List of OpenC2 language versions supported by this Actuator
   2 profiles         Nsid unique [0..*]           // List of profiles supported by this Actuator
   3 pairs            Pairs optional               // Targets applicable to each supported Action
   4 rate_limit       Number{0.0..*} optional      // Maximum number of requests per minute supported by design or policy
1036 th               AP-Results optional          // TH-defined results

Pairs = Enumerated
   3 query: features, /huntbooks, /datasources
  30 investigate: /hunt

AP-Target = Choice                                 // TH targets defined in this profile.
   1 hunt             String                       // A procedure to find a set of entities in the monitored environment that associates with a cyberthreat.
   2 huntbooks        Huntbook-Specifiers          // TH Huntbook specifiers.
   3 datasources      String optional

AP-Args = Map                                      // TH command arguments defined in this profile.
   1 huntargs         Huntargs                     // Arguments for use in conjunction with huntbook implementation.

Huntargs = Record{1..*}                            // TH command arguments defined in this profile.
   1 string_arg       String optional              // string arguments supplied as huntargs.
   2 integer_arg      Integer optional             // integer arguments supplied as huntargs.
   3 stix             STIX-Cybersecurity-Observables optional // STIX arguments supplied as huntargs.
   4 timeranges       Timeranges optional          // Timeranges used in the execution of a hunt.
   5 datasources      Datasource-Array optional    // Available data sources for hunting. These may be a host monitor, an EDR, a SIEM, a firewall, etc.
   6 ipv4_address     IPv4-Addr optional           // IPv4 address as defined in [RFC0791].
   7 ipv6_address     IPv6-Addr optional           // IPv6 address as defined in [RFC8200].
   8 ipv4_network     IPv4-Net optional            // ipv4 network targeted by hunt activity.
   9 ipv6_network     IPv6-Net optional            // ipv6 network targeted by hunt activity.

Huntbook-Specifiers = Map                          // TH Huntbook specifiers.
   1 path             String optional              // Return huntbooks at and below this filesystem location (absolute path).
   2 tags             Tags optional                // Return huntbooks with these keywords.
   3 arg_types        Specified-Arg-Types optional // Return huntbooks that take these argument types.
   4 arg_names        Specified-Arg-Names optional // Return huntbooks that take these argument types.
   5 format_types     Return-Type optional         // Return huntbooks that produce these output types.
   6 return_format    Huntbook-Sections optional   // For each huntbook returned, include these data items.

Specified-Arg-Types = ArrayOf(Arg-Type)            // Return huntbooks that take these argument types.

Specified-Arg-Names = ArrayOf(Arg-Name)            // Return huntbooks that take arguments with these names.

AP-Results = Map{1..*}                             // TH results defined in this profile.
   1 huntbook_info    ArrayOf(Huntbook-Info) optional // Structured data returned by Query: Huntbooks.
   2 datasources      Datasource-Array optional    // Datasource names and info returned by Query Datasources.
   3 stix_returns     STIX-Cybersecurity-Observables optional // STIX SCO object returns

Timeranges = ArrayOf(Timerange)                    // a timerange used in the execution of a hunt.

Timerange = Choice                                 // Identification of process to be targeted by Threat Hunting activity.
   1 timerange_absolute Timerange-Abs optional     // Absolute timerange, defined by a start and end time in ISO 8601 format.
   2 timerange_relative Timerange-Rel optional     // Relative timerange, example '3, Days' for last 3 days.

Time-Unit = Enumerated                             // Time Unit Keywords.
   1 Days
   2 Hours
   3 Minutes
   4 Seconds

Timerange-Abs = Record{2..*}                       // Absolute timerange, defined by a start and end time in ISO 8601 format.
   1 hunt_start_time  timestamp                    // Start time, as a STIX time string.
   2 hunt_stop_time   timestamp                    // Stop time, as a STIX time string.

Timerange-Rel = Record{2..*}                       // Relative timerange, example '3, Days' for last 3 days.
   1 number           Integer                      // Number of specified Time Units used in Relative Timerange.
   2 time_unit        Time-Unit                    // Time Unit Keywords.

Arg-Type = String                                  // Argument types used by a Huntbook. Follow STIX naming conventions, with lowercase characters and hyphens replacing spaces. Common types include process, file, and network-traffic.

Arg-Name = String                                  // Argument names used by a Huntbook. Follow C variable naming conventions. Examples include name, src_port, and x_unique_id.

Return-Type = Record{2..*}                         // Variable names and types expected as returns when using a Huntbook.
   1 var_name         Arg-Name                     // Variable name to be returned by use of Huntbook.
   2 var_type         Arg-Type                     // Type of data to be returned by use of Huntbook.

Datasource = Record{1..*}                          // Datasource names and tags required for use with a particular Huntbook.
   1 ds_name          String                       // Name of a Datasource used by a Huntbook in Kestrel runtime.
   2 ds_tags          Tags optional                // Tags applied to a Datasource for search or filter purposes.

Huntbook-Sections = ArrayOf(Huntbook-Section)      // For each huntbook returned, include these data items.

Huntbook-Section = Enumerated                      // Data format to be returned by Query Huntbooks. If none specified, return all.
   1 path                                          // Specifies the return should include the path to each Huntbook specified by the query conditions.
   2 uniqueId                                      // Specifies the return should include the ID of each Huntbook specified by the query conditions.
   3 version                                       // Specifies the return should include the ID of each Huntbook specified by the query conditions.
   4 args_required                                 // Specifies the returned data should include the required arguments for the available Huntbooks.
   5 expected_returns                              // Specifies the returned data should include the expected returns for the available Huntbooks.
   6 script                                        // Specifies the returned data should include the full text of the Huntflow for each available Huntbook.

Huntbook-Info = Record{1..*}                       // Structured data returned by Query: Huntbooks with specifiers for specific info.
   1 path             String optional              // Path used to identify a Huntbook in place of a name.
   2 uniqueId         Integer optional             // Unique ID associated with a specified Huntbook.
   3 version          String optional              // Unique ID associated with a specified Huntbook.
   4 args_required    Typed-Arguments optional     // List of arguments used in the specified Huntflow.
   5 expected_returns Typed-Arguments optional     // Data returned by the specified Huntbooks.
   6 script           String optional              // Text of Hunt logic implemented by specified Huntbook.

Datasource-Array = ArrayOf(Datasource)             // An Array of Datasources, with multiple uses in Threathunting

Tags = ArrayOf(String)                             // Tags applied for search or filter purposes.

Typed-Arguments = MapOf(Arg-Name, Arg-Type)        // Argument names and types tied to a specific Huntbook.

STIX-Cybersecurity-Observables = ArrayOf(SCO)      // An Array of Cybersecurity Observables in STIX formatting

SCO = Choice                                       // Availiable Cybersecurity Observables in the STIX language
   1 Process          process

process = Record                                   // The Process Object represents common properties of an instance of a computer program as executed on an operating system.
   1 type             String{pattern="^process$"}
   2 id               String{pattern="^process--"}
   3 extensions       ArrayOf(String) optional
   4 is_hidden        Boolean optional
   5 pid              Integer optional             // Specifies the Process ID, or PID, of the process.
   6 created_time     timestamp optional           // Specifies the date/time at which the process was created.
   7 cwd              String optional              // Specifies the current working directory of the process.
   8 command_line     String optional              // Specifies the full command line used in executing the process, including the process name (which may be specified individually via the binary_ref.name property) and any arguments.
   9 environment_variables ArrayOf(String) optional // Specifies the list of environment variables associated with the process as a dictionary.
  10 opened_connection_refs String optional        // Specifies the list of network connections opened by the process, as a reference to one or more Network Traffic Objects.
  11 creator_user_ref ArrayOf(String){1..*} optional // Specifies the user that created the process, as a reference to a User Account Object.
  12 image_ref        String optional              // Specifies the executable binary that was executed as the process image, as a reference to a File Object.
  13 parent_ref       String optional              // Specifies the other process that spawned (i.e. is the parent of) this one, as represented by a Process Object.
  14 child_refs       ArrayOf(String){1..*} optional // Specifies the other processes that were spawned by (i.e. children of) this process, as a reference to one or more other Process Objects.
  15 spec_version     spec_version optional
  16 object_marking_refs object_marking_refs optional
  17 granular_markings granular_markings optional
  18 defanged         defanged optional

spec_version = Enumerated                          // The version of the STIX specification used to represent the content in this cyber-observable.
   1 2.0
   2 2.1

object_marking_refs = ArrayOf(identifier){1..*}    // The list of marking-definition objects to be applied to this object.

granular_marking = Record
   1 selectors        identifier                   // A list of selectors for content contained within the STIX object in which this property appears.
   2 lang             String                       // Identifies the language of the text identified by this marking.
   3 pattern          identifier                   // The marking_ref property specifies the ID of the marking-definition object that describes the marking.

granular_markings = ArrayOf(granular_marking){1..*} // The set of granular markings that apply to this object.

defanged = Boolean                                 // Defines whether or not the data contained within the object has been defanged.

identifier = String{pattern="^[a-z][a-z0-9-]+[a-z0-9]--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"} // Represents identifiers across the CTI specifications. The format consists of the name of the top-level object being identified, followed by two dashes (--), followed by a UUIDv4.

properties = Array{1..*}                           // Rules for custom properties
   1  Binary optional                              // binary::
   2  Hex optional                                 // hex:: The hex data type encodes an array of octets (8-bit bytes) as hexadecimal. The string MUST consist of an even number of hexadecimal characters, which are the digits '0' through '9' and the letters 'a' through 'f'.  In order to allow pattern matching on custom objects, all properties that use the hex type, the property name MUST end with '_hex'.
   3  ArrayOf(String){1..*} optional               // array::
   4  String optional                              // string::
   5  Integer optional                             // integer::
   6  Boolean optional                             // boolean::
   7  Number optional                              // number::

Hex = String{pattern="^([a-fA-F0-9]{2})+$"}

timestamp = String{pattern="^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"}

Features = ArrayOf(Feature){0..10} unique          // An array of zero to ten names used to query a Consume for its supported capabilities.

IPv4-Net = Array /ipv4-net                         // IPv4 address and prefix length
   1  IPv4-Addr                                    // ipv4_addr:: IPv4 address as defined in [[RFC0791]](#rfc0791)
   2  Integer optional                             // prefix_length:: CIDR prefix-length. If omitted, refers to a single host address.

IPv6-Net = Array /ipv6-net                         // IPv6 address and prefix length
   1  IPv6-Addr                                    // ipv6_addr:: IPv6 address as defined in [[RFC8200]](#rfc8200)
   2  Integer optional                             // prefix_length:: prefix length. If omitted, refers to a single host address

Date-Time = Integer{0..*}                          // Date and Time

Duration = Integer{0..*}                           // A length of time

Feature = Enumerated                               // Specifies the results to be returned from a query features Command
   1 versions                                      // List of OpenC2 Language versions supported by this Consumer
   2 profiles                                      // List of profiles supported by this Consumer
   3 pairs                                         // List of supported Actions and applicable Targets
   4 rate_limit                                    // Maximum number of Commands per minute supported by design or policy

IPv4-Addr = Binary /ipv4-addr                      // 32 bit IPv4 address as defined in [[RFC0791]](#rfc0791)

IPv6-Addr = Binary /ipv6-addr                      // 128 bit IPv6 address as defined in [[RFC8200]](#rfc8200)

Nsid = String{1..16}                               // A short identifier that refers to a namespace.

Response-Type = Enumerated
   0 none                                          // No response
   1 ack                                           // Respond when Command received
   2 status                                        // Respond with progress toward Command completion
   3 complete                                      // Respond when all aspects of Command completed

Status-Code = Enumerated.ID
 102                                               // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
 200                                               // OK:: the Command has succeeded
 201                                               // Created:: the Command has succeeded and a new resource has been created as a result of it
 400                                               // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
 401                                               // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
 403                                               // Forbidden:: the Consumer understood the Command but refuses to authorize it
 404                                               // Not Found:: the Consumer has not found anything matching the Command
 500                                               // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
 501                                               // Not Implemented:: the Consumer does not support the functionality required to perform the Command
 503                                               // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Command-ID = String{pattern="^\S{0,36}$"}          // Command Identifier

Version = String{pattern="^(\d{1,4})(\.(\d{1,6})){0,2}$"} // Major.Minor.Patch version number
